@page "/help/contribute"
@inject IJSRuntime jsRuntime
@inject IEmailSender mailSender

@inject HttpContextAccessor httpContextAccessor
@inject Microsoft.AspNetCore.Identity.UserManager<User> userManager

<Box>
    <Title>Contribute</Title>
    <Content>
        @if (showForm)
        {
            <p>
                <b>Note:</b> Please let us know if you'd like add-/edit access - especially on a regular basis - we will then upgrade your account, enabling you to add/edit demos, groups, sceners, parties...everything!
            </p>
            <p>
                You also can use this form to send anything we could use on our page - a new demo, infos for a party, a correction.
            </p>
            <EditForm Model="feedbackModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <InputText class="form-control" @bind-Value="@feedbackModel.Name" placeholder="Name" />
                    <ValidationMessage For="@(() => feedbackModel.Name)" />
                </div>
                <div class="form-group">
                    <InputText class="form-control" @bind-Value="@feedbackModel.Email" placeholder="Email-Adress" />
                    <ValidationMessage For="@(() => feedbackModel.Email)" />
                </div>
                <div class="form-group">
                    <InputTextArea rows="5" class="form-control" @bind-Value="@feedbackModel.Message" placeholder="Your message" />
                    <ValidationMessage For="@(() => feedbackModel.Message)" />
                </div>
                <div class="form-group">

                    <BlazorInputFile.InputFile multiple OnChange="HandleSelection" />

                    @if (uploadedFiles.Any())
                    {
                        foreach (var uploadedFile in uploadedFiles)
                        {
                            <div class="alert alert-info mt-1">
                                File successfully uploaded @uploadedFile.Name (@uploadedFile.Size Bytes)
                                <button type="button" class="close" @onclick="@(() => RemoveUploadedFile(uploadedFile))">
                                    <span>&times;</span>
                                </button>
                            </div>
                        }
                    }
                </div>
                <div class="form-group">
                    <button type="submit" disabled="@buttonDisabled" class="btn btn-success">Send contribution</button>
                </div>
            </EditForm>
        }
        else
        {
            <p>@message</p>
        }
    </Content>
</Box>

@code{
    private bool buttonDisabled = false;

    private FeedbackModel feedbackModel = new FeedbackModel();

    private bool showForm = true;

    private List<IFileListEntry> uploadedFiles = new List<IFileListEntry>();

    private string message = "Your feedback has been received, thank you!";

    protected override async Task OnInitializedAsync()
    {
        showForm = await jsRuntime.CanRedoAction("Contribution", TimeSpan.FromMinutes(10));

        if (!showForm)
            message = "We've already received your contribution some minutes ago, Thank you! Please wait some minutes until you can try again.";

        feedbackModel.Name = httpContextAccessor.HttpContext.GetUserName();

        if (!string.IsNullOrEmpty(feedbackModel.Name))
        {
            var user = await userManager.FindByIdAsync(httpContextAccessor.HttpContext.GetUserId());
            feedbackModel.Email = user.Email;
        }

    }

    private void RemoveUploadedFile(IFileListEntry file)
    {
        uploadedFiles.Remove(file);
    }

    void HandleSelection(IFileListEntry[] files)
    {
        uploadedFiles.AddRange(files);
    }

    private async Task OnValidSubmit()
    {
        await jsRuntime.SetRedoTrigger("Contribution");

        var mailAttachments = new List<MailAttachment>();

        foreach (var uploadedFile in uploadedFiles)
        {

            var ms = new System.IO.MemoryStream();
            await uploadedFile.Data.CopyToAsync(ms);

            var bytearray = ms.ToArray();

            var attachment = new MailAttachment();
            attachment.Content = bytearray;
            attachment.Filename = uploadedFile.Name;

            mailAttachments.Add(attachment);

        }

        var mailText = $"We're received the following contribution from {feedbackModel.Name} ({feedbackModel.Email}) on {DateTime.Now}:<br>{feedbackModel.Message}";
        if (mailAttachments.Any())
        {
            mailText += $"<br><br><b>The mail contains {mailAttachments.Count} attachments, please open with care!";
        }

        buttonDisabled = true;
        await InvokeAsync(StateHasChanged);
        await mailSender.SendAdminEmailAsync(new MailAddress(feedbackModel.Email, feedbackModel.Name), "Feedback", mailText, mailAttachments);
        showForm = false;
        buttonDisabled = false;
        await InvokeAsync(StateHasChanged);

    }
}