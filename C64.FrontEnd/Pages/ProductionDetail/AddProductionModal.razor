@namespace C64.FrontEnd.Pages

@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject ILogger<WriteComment>  logger
@inject NavigationManager navigationManager
@inject IToastService toastService

<BootstrapModal @ref="bootstrapModal" Title="Add new production" Size="BootstrapModal.ModalSize.Large">
    <Content>
        <EditForm Model="editProductionGeneral" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Productionname:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@editProductionGeneral.Name" />
                    <ValidationMessage For="@(() => editProductionGeneral.Name)" />
                </div>
            </div>
            <div class="form-group">
                <label>Aka (also known as):</label>
                <div>
                    <InputText class="form-control" @bind-Value="@editProductionGeneral.Aka" />
                    <ValidationMessage For="@(() => editProductionGeneral.Aka)" />
                </div>
            </div>
            <div class="form-group">
                <label>Groups:</label>
                <div>
                    <BlazoredTypeahead @bind-Values="@editProductionGeneral.SelectedGroups" SearchMethod="SearchGroups">
                        <SelectedTemplate Context="group">
                            @group.Name
                        </SelectedTemplate>
                        <ResultTemplate Context="group">
                            @group.GroupId (@group.Name)
                        </ResultTemplate>
                        <NotFoundTemplate>
                            No group named @searchText found - please add it on the groups page first
                        </NotFoundTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <div class="form-group">
                <label>Category:</label>
                <div>
                    <InputSelect @bind-Value="editProductionGeneral.SubCategory" class="form-control">
                        @foreach (var item in Enum.GetValues(typeof(SubCategory)))
                        {
                            <option value="@item"><EnumDisplayNameAttribute DisplayNameFor="item" /></option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="form-group">
                <label>Released on:</label>
                <div>
                    <InputPartialDate @bind-Value="@editProductionGeneral.ReleasedOn" StartingYear="1982" EndingYear="DateTime.Now.Year" />
                </div>
            </div>
            <div class="form-group">
                <label>Released at:</label>
                <div>
                    <BlazoredTypeahead @bind-Value="@editProductionGeneral.Party" SearchMethod="SearchParty" placeholder="Enter party name">
                        <SelectedTemplate Context="party">
                            @party.Name
                        </SelectedTemplate>
                        <ResultTemplate Context="party">
                            @party.Name (<PartialDateDisplay DateType="DateType.YearMonthDay" DateValue="@party.From" /> - <PartialDateDisplay DateType="DateType.YearMonthDay" DateValue="@party.To" />)
                        </ResultTemplate>
                        <NotFoundTemplate>
                            Party not found - you may add a new party on the parties page.
                        </NotFoundTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            @if (editProductionGeneral.Party != null)
            {
                <div class="form-group">
                    <label>Achieved Rank in Category (Set to 0 / leave empty if not applicable or known):</label>
                    <div class="row">
                        <div class="col-6">
                            <InputNumber class="form-control" @bind-Value="@editProductionGeneral.PartyRank" placeholder="Rank" />
                            <ValidationMessage For="@(() => editProductionGeneral.PartyRank)" />
                        </div>
                        <div class="col-6">
                            <InputSelect @bind-Value="editProductionGeneral.PartyCategoryId" class="form-control">
                                <option value="0">unknown / no competition</option>
                                @foreach (var item in partyCategories.OrderBy(p => p.Name))
                                    {
                                    <option value="@item.PartyCategoryId.ToString()">@item.Name</option>
                                    }
                            </InputSelect>
                            <ValidationMessage For="@(() => editProductionGeneral.PartyCategoryId)" />
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-primary" type="submit">Add Production</button>
        </EditForm>
    </Content>
</BootstrapModal>

@code {
    [Parameter]
    public Production Production { get; set; }

    [Parameter]
    public EventCallback OnClosed { get; set; }

    [Parameter]
    public IUnitOfWork unitOfWork { get; set; }

    private BootstrapModal bootstrapModal;

    private EditProductionGeneral editProductionGeneral = new EditProductionGeneral();

    private string searchText = string.Empty;

    private IEnumerable<PartyCategory> partyCategories { get; set; } = new List<PartyCategory>();

    private async Task<IEnumerable<Party>> SearchParty(string searchPartyText)
    {
        var result = (await unitOfWork.Parties.Find(p => p.Name.Contains(searchPartyText, StringComparison.OrdinalIgnoreCase))).OrderByDescending(p => p.From);
        return await Task.FromResult(result);
    }

    private async Task<IEnumerable<Group>> SearchGroups(string searchText)
    {
        this.searchText = searchText;

        var result = (await unitOfWork.Groups.Find(p => p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))).OrderBy(p => p.Name);
        return await Task.FromResult(result.OrderBy(p => p.Name));

    }

    private async Task OnValidSubmit()
    {
        logger.LogInformation("OnValidSubmit");

        Production.Name = editProductionGeneral.Name;
        Production.Aka = editProductionGeneral.Aka;
        Production.ReleaseDate = editProductionGeneral.ReleasedOn.Date;
        Production.ReleaseDateType = editProductionGeneral.ReleasedOn.Type;
        Production.TopCategory = editProductionGeneral.TopCategory;
        Production.SubCategory = editProductionGeneral.SubCategory;
        Production.Added = DateTime.Now;

        foreach (var selectedGroup in editProductionGeneral.SelectedGroups)
            Production.ProductionsGroups.Add(new ProductionsGroups { GroupId = selectedGroup.GroupId });

        if (editProductionGeneral.Party != null)
        {
            int? categoryId = null;
            int.TryParse(editProductionGeneral.PartyCategoryId, out var categoryParsed);

            if (categoryParsed != 0)
                categoryId = categoryParsed;

            Production.ProductionsParties.Add(new ProductionsParties { PartyId = editProductionGeneral.Party.PartyId, PartyCategoryId = categoryId, Rank = editProductionGeneral.PartyRank });
        }

        Production.SubmitterUserId = httpContext.HttpContext.GetUserId();
        Production.UserId = httpContext.HttpContext.GetUserId();

        unitOfWork.Productions.Add(Production);

        await unitOfWork.Commit();

        var productionHistory = HistoryHandlerFactory.Get(HistoryEntity.Production, unitOfWork, Production, httpContext.HttpContext.GetUserId(), httpContext.HttpContext.RemoteIp());
        productionHistory.AddHistory(HistoryEditProperty.AddProduction, Production);
        productionHistory.Apply();

        await unitOfWork.Commit();

        await OnClosed.InvokeAsync(null);

        await bootstrapModal.Close(Production);

    }

    protected override async Task OnInitializedAsync()
    {
        if (!httpContext.HttpContext.CanEdit())
        {
            navigationManager.NavigateTo("/help/contribute");
            toastService.ShowInfo("Editing requires an updated account - please drop us a note to have your account updated!");
            return;
        }

        partyCategories = await unitOfWork.Parties.GetCategories();

        editProductionGeneral = new EditProductionGeneral();
        editProductionGeneral.Name = Production.Name;
        editProductionGeneral.Aka = Production.Aka;
        editProductionGeneral.ReleasedOn = new PartialDate(Production.ReleaseDate, Production.ReleaseDateType);
        editProductionGeneral.TopCategory = Production.TopCategory;
        editProductionGeneral.SubCategory = Production.SubCategory;
        editProductionGeneral.SelectedGroups = Production.ProductionsGroups.Select(p => p.Group).ToList();

        editProductionGeneral.Party = Production.ProductionsParties.FirstOrDefault()?.Party;

        if (editProductionGeneral != null)
        {
            editProductionGeneral.PartyCategoryId = Production.ProductionsParties.FirstOrDefault()?.PartyCategory.PartyCategoryId.ToString() ?? null;

            var rank = Production.ProductionsParties.FirstOrDefault()?.Rank;
            editProductionGeneral.PartyRank = rank.GetValueOrDefault();
        }

    }

}