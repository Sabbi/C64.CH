@namespace C64.FrontEnd.Pages

@inject IJSRuntime jsRuntime
@inject IFileStorageService fileStorageService
@inject IUnitOfWork unitOfWork
@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext

@using System.Security.Claims

@if (ProductionFile != null)
{
    <p>
        @if (isFirefox)
        {
            <a href="" @onclick="DownloadFirefox" @onclick:preventDefault><i class="far fa-save"></i> @ProductionFile.Filename</a>
        }
        else
        {
            <a href="/data/productionfiles/@ProductionFile.Filename" target="_top" @onclick="DownloadFile"><i class="far fa-save"></i> @ProductionFile.Filename</a>
        }
        <span class="d-none">
            <a href="/demos/download.php?id=@ProductionFile.ProductionId" @onclick="DownloadFile">Legacy Download</a>
        </span>
        <br />
        Downloads: @ProductionFile.Downloads
        <br />
        Size: @ProductionFile.SizeKb kBytes
    </p>
}

@code {
    [Parameter]
    public ProductionFile ProductionFile { get; set; }

    [Parameter]
    public EventCallback<int> OnDownload { get; set; }

    private bool isFirefox = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        isFirefox = await jsRuntime.InvokeAsync<bool>("isFirefox");
    }

    private async Task DownloadFirefox()
    {
        await unitOfWork.Productions.AddDownload(ProductionFile.Filename, null, null, httpContext.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier));
        await unitOfWork.Commit();
        ProductionFile.Downloads++;
        var file = await fileStorageService.GetFileContents("productionfiles", ProductionFile.Filename);
        await FileUtil.SaveAs(jsRuntime, ProductionFile.Filename, file);
        await OnDownload.InvokeAsync(ProductionFile.ProductionFileId);
    }

    private async Task DownloadFile()
    {
        ProductionFile.Downloads++;
        await OnDownload.InvokeAsync(ProductionFile.ProductionFileId);

    }
}