@namespace C64.FrontEnd.Pages

@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject IJSRuntime jsRuntime
@inject IUnitOfWork unitOfWork
@inject IFallbackArchiveService archiveService
@inject IFileStorageService fileStorageService

@implements IDisposable

<BootstrapModal @ref="bootstrapModal" Title="@title" Size="BootstrapModal.ModalSize.Large">
    <Content>
        <p class="float-right">
            @if (started)
            {
                <button class="btn btn-primary" type="button" @onclick="FullScreen">Go fullscreen</button>
            }
        </p>
        <div id="emularity-splash-screen"></div>
        <canvas id="canvas" style="display: none; margin: 0 auto; background-color:#eeeeee" />
        <ul>
            <li>Demos should autostart, fullscreen only available after emulator has started</li>
            <li>To insert next disk, click inside the emu, press Alt-N OR use F12 to enter Vice-Menu and choose a disk yourself (in emulator-folder)</li>
            <li>Alt-W to speed up, Joystick = Keypad+0, press ALT-J to switch ports, ESC or Alt-Tab to get back your mouse cursor</li>
            <li>Sorry, no mute button</li>
        </ul>
    </Content>
</BootstrapModal>

@code {

    [Parameter]
    public ProductionFile ProductionFile { get; set; }

    private BootstrapModal bootstrapModal;
    private string title = "";

    private bool started = false;

    protected override void OnInitialized()
    {
        title += $"Emulating  {ProductionFile.Filename}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        // Bi Ba Baschtel

        var fileIndexesToLoad = new List<int>();
        var productionFile = ProductionFile;

        var fileName = productionFile.Filename;

        byte[] fileData = null;

        // Concurrent connections otherwise, I don't know why (yet)
        try
        {
            fileData = await fileStorageService.GetFileContents("productionfiles", fileName);
        }
        catch
        {
            try
            {
                System.Threading.Thread.Sleep(50);
                fileData = await fileStorageService.GetFileContents("productionfiles", fileName);
            }
            catch
            {
                return;
            }
        }

        archiveService.Load(fileData);

        var archiveInfo = archiveService.ArchiveInfo;
        var arcl = archiveInfo.CompressedFileInfos.ToList();
        if (archiveInfo.NumberOfD64Files == 1)
        {
            var fileInfo = archiveInfo.CompressedFileInfos.FirstOrDefault(p => p.IsD64);
            fileIndexesToLoad.Add(arcl.IndexOf(fileInfo));
        }
        else if (archiveInfo.NumberOfD64Files > 1)
        {
            foreach (var fileInfo in archiveInfo.CompressedFileInfos.Where(p => p.IsD64).OrderBy(p => p.FileName))
            {
                fileIndexesToLoad.Add(arcl.IndexOf(fileInfo));
            }
        }
        else
        {
            // if no d64-Files, load first prg, t64, p00 or t00-file
            var prg = archiveInfo.CompressedFileInfos.FirstOrDefault(p => p.FileName.EndsWith(".prg", StringComparison.OrdinalIgnoreCase));
            if (prg == null)
                prg = archiveInfo.CompressedFileInfos.FirstOrDefault(p => p.FileName.EndsWith(".t64", StringComparison.OrdinalIgnoreCase));
            if (prg == null)
                prg = archiveInfo.CompressedFileInfos.FirstOrDefault(p => p.FileName.EndsWith(".p00", StringComparison.OrdinalIgnoreCase));
            if (prg == null)
                prg = archiveInfo.CompressedFileInfos.FirstOrDefault(p => p.FileName.EndsWith(".t00", StringComparison.OrdinalIgnoreCase));

            fileIndexesToLoad.Add(arcl.IndexOf(prg));
        }

        var list = new List<string>();
        var flipList = new List<int>();

        if (fileIndexesToLoad.Any())
        {
            foreach (var indexToLoad in fileIndexesToLoad)
            {
                list.Add($"{ProductionFile.ProductionFileId}-{indexToLoad}.bin");
            }

            if (fileIndexesToLoad.Count > 1)
            {
                for (var i = 1; i < fileIndexesToLoad.Count + 1; i++)
                {
                    flipList.Insert(0, i);
                }
            }

            flipList.Reverse();
            await jsRuntime.InvokeVoidAsync("setupEmu", list, flipList);
            await jsRuntime.InvokeVoidAsync("startEmu");
            started = true;
            StateHasChanged();
        }
    }

    private async Task Start()
    {
        await jsRuntime.InvokeVoidAsync("startEmu");
        started = true;
    }

    public void Dispose()
    {
        jsRuntime.InvokeVoidAsync("exitEmu");
    }

    public async Task FullScreen()
    {
        await jsRuntime.InvokeVoidAsync("goFullScreen");
    }

}