@namespace C64.FrontEnd.Pages

@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject ILogger<WriteComment>  logger

<BootstrapModal @ref="bootstrapModal" Title="@($"Edit General Information of {Production.Name}")" Size="BootstrapModal.ModalSize.Large">
    <Content>
        <EditForm Model="editProductionGeneral" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Productionname:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@editProductionGeneral.Name" />
                    <ValidationMessage For="@(() => editProductionGeneral.Name)" />
                </div>
            </div>
            <div class="form-group">
                <label>Aka (also known as):</label>
                <div>
                    <InputText class="form-control" @bind-Value="@editProductionGeneral.Aka" />
                    <ValidationMessage For="@(() => editProductionGeneral.Aka)" />
                </div>
            </div>
            <div class="form-group">
                <label>Released by groups:</label>
                <div>
                    <BlazoredTypeahead @bind-Values="@editProductionGeneral.SelectedGroups" SearchMethod="SearchGroups">
                        <SelectedTemplate Context="group">
                            @group.Name
                        </SelectedTemplate>
                        <ResultTemplate Context="group">
                            @group.GroupId (@group.Name)
                        </ResultTemplate>
                        <NotFoundTemplate>
                            No group named @searchText found - please add it on the groups page first
                        </NotFoundTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <div class="form-group">
                <label>Released by sceners:</label>
                <div>
                    <BlazoredTypeahead @bind-Values="@editProductionGeneral.SelectedSceners" SearchMethod="SearchScener">
                        <SelectedTemplate Context="scener">
                            @scener.Handle
                        </SelectedTemplate>
                        <ResultTemplate Context="scener">
                            @scener.ScenerId (@scener.Handle)
                        </ResultTemplate>
                        <NotFoundTemplate>
                            No scener named @scenerSearchText found - please add it on the sceners page first
                        </NotFoundTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <div class="form-group">
                <label>Platform:</label>
                <div>
                    <InputSelect @bind-Value="editProductionGeneral.Platform" class="form-control">
                        @foreach (var item in Enum.GetValues(typeof(Platform)))
                        {
                            <option value="@item"><EnumDisplayNameAttribute DisplayNameFor="item" /></option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="form-group">
                <label>Category:</label>
                <div>
                    <InputSelect @bind-Value="editProductionGeneral.SubCategory" class="form-control">
                        @foreach (var item in Enum.GetValues(typeof(SubCategory)))
                        {
                            <option value="@item"><EnumDisplayNameAttribute DisplayNameFor="item" /></option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="form-group">
                <label>Released on:</label>
                <div>
                    <InputPartialDate @bind-Value="@editProductionGeneral.ReleasedOn" StartingYear="1982" EndingYear="DateTime.Now.Year" />
                </div>
            </div>
            <div class="form-group">
                <label>Released at:</label>
                <div>
                    <BlazoredTypeahead @bind-Value="@editProductionGeneral.Party" SearchMethod="SearchParty" placeholder="Enter party name">
                        <SelectedTemplate Context="party">
                            @party.Name
                        </SelectedTemplate>
                        <ResultTemplate Context="party">
                            @party.Name (<PartialDateDisplay DateType="DateType.YearMonthDay" DateValue="@party.From" /> - <PartialDateDisplay DateType="DateType.YearMonthDay" DateValue="@party.To" />)
                        </ResultTemplate>
                        <NotFoundTemplate>
                            Party not found - you may add a new party thru the add menu.
                        </NotFoundTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            @if (editProductionGeneral.Party != null)
            {
                <div class="form-group">
                    <label>Achieved Rank in Category (Set to 0 / leave empty if not applicable or known):</label>
                    <div class="row">
                        <div class="col-6">
                            <InputNumber class="form-control" @bind-Value="@editProductionGeneral.PartyRank" placeholder="Rank" />
                            <ValidationMessage For="@(() => editProductionGeneral.PartyRank)" />
                        </div>
                        <div class="col-6">
                            <InputSelect @bind-Value="editProductionGeneral.PartyCategoryId" class="form-control">
                                <option value="0">unknown / no competition</option>
                                @foreach (var item in partyCategories.OrderBy(p => p.Name))
                                    {
                                    <option value="@item.PartyCategoryId.ToString()">@item.Name</option>
                                    }
                            </InputSelect>
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-primary" type="submit">Update Production</button>
        </EditForm>
    </Content>
</BootstrapModal>

@code {
    [Parameter]
    public Production Production { get; set; }

    [Parameter]
    public EventCallback OnClosed { get; set; }

    [Parameter]
    public IUnitOfWork unitOfWork { get; set; }

    private BootstrapModal bootstrapModal;

    private EditProductionGeneral editProductionGeneral = new EditProductionGeneral();

    private string searchText = string.Empty;
    private string scenerSearchText = string.Empty;

    private IEnumerable<PartyCategory> partyCategories { get; set; } = new List<PartyCategory>();

    private async Task<IEnumerable<Party>> SearchParty(string searchPartyText)
    {
        int parsedId;
        bool isInt = int.TryParse(searchPartyText, out parsedId);

        var result = (await unitOfWork.Parties.Find(p => !p.Deleted && (p.Name.Contains(searchPartyText) || (isInt && p.PartyId == parsedId)))).OrderByDescending(p => p.From);
        return await Task.FromResult(result);
    }

    private async Task<IEnumerable<Scener>> SearchScener(string searchText)
    {
        this.scenerSearchText = searchText;

        int parsedId;
        bool isInt = int.TryParse(searchText, out parsedId);

        var result = (await unitOfWork.Sceners.Find(p => p.Handle.Contains(searchText) || (isInt && p.ScenerId == parsedId))).OrderBy(p => p.Handle).ToList();
        if (result.Any(p => p.Handle.Equals(searchText, StringComparison.OrdinalIgnoreCase)))
        {
            var exactMatch = result.FirstOrDefault(p => p.Handle.Equals(searchText, StringComparison.OrdinalIgnoreCase));
            result.Remove(exactMatch);
            result.Insert(0, exactMatch);
        }
        return result;
    }

    private async Task<IEnumerable<Group>> SearchGroups(string searchText)
    {
        this.searchText = searchText;


        int parsedId;
        bool isInt = int.TryParse(searchText, out parsedId);

        var result = (await unitOfWork.Groups.Find(p => p.Name.Contains(searchText) || (isInt && p.GroupId == parsedId))).OrderBy(p => p.Name).ToList();;
        if (result.Any(p => p.Name.Equals(searchText, StringComparison.OrdinalIgnoreCase)))
        {
            var exactMatch = result.FirstOrDefault(p => p.Name.Equals(searchText, StringComparison.OrdinalIgnoreCase));
            result.Remove(exactMatch);
            result.Insert(0, exactMatch);
        }
        return result;

    }

    private async Task OnValidSubmit()
    {
        logger.LogInformation("OnValidSubmit");

        var productionHistory = HistoryHandlerFactory.Get(HistoryEntity.Production, unitOfWork, Production, httpContext.HttpContext.GetUserId(), httpContext.HttpContext.RemoteIp());
        productionHistory.AddHistory(HistoryEditProperty.Name, editProductionGeneral.Name);
        productionHistory.AddHistory(HistoryEditProperty.Aka, editProductionGeneral.Aka);
        productionHistory.AddHistory(HistoryEditProperty.SubCategory, editProductionGeneral.SubCategory);
        productionHistory.AddHistory(HistoryEditProperty.Platform, editProductionGeneral.Platform);

        productionHistory.AddHistory(HistoryEditProperty.ReleaseDate, new PartialDate { Date = editProductionGeneral.ReleasedOn.Date, Type = editProductionGeneral.ReleasedOn.Type });

        int? partyCategory = editProductionGeneral.PartyCategoryId == "0" ? null : (int?)int.Parse(editProductionGeneral.PartyCategoryId);
        string partyCategoryName = partyCategories.FirstOrDefault(p => p.PartyCategoryId == partyCategory)?.Name;

        productionHistory.AddHistory(HistoryEditProperty.Party, new PartyApplierData
        {
            PartyId = editProductionGeneral.Party?.PartyId ?? 0,
            PartyName = editProductionGeneral.Party?.Name,
            CategoryId = partyCategory,
            CategoryName = partyCategoryName,
            Rank = editProductionGeneral.PartyRank
        });
        productionHistory.AddHistory(HistoryEditProperty.Groups, editProductionGeneral.SelectedGroups);
        productionHistory.AddHistory(HistoryEditProperty.Sceners, editProductionGeneral.SelectedSceners);

        productionHistory.Apply();

        await unitOfWork.Commit();

        await OnClosed.InvokeAsync(null);

        await bootstrapModal.Close();

    }

    protected override async Task OnInitializedAsync()
    {
        partyCategories = await unitOfWork.Parties.GetCategories();

        editProductionGeneral = new EditProductionGeneral();
        editProductionGeneral.Name = Production.Name;
        editProductionGeneral.Aka = Production.Aka;
        editProductionGeneral.ReleasedOn = new PartialDate(Production.ReleaseDate, Production.ReleaseDateType);
        editProductionGeneral.TopCategory = Production.TopCategory;
        editProductionGeneral.SubCategory = Production.SubCategory;
        editProductionGeneral.Platform = Production.Platform;
        editProductionGeneral.SelectedGroups = Production.ProductionsGroups.Select(p => p.Group).ToList();
        editProductionGeneral.SelectedSceners = Production.ProductionsSceners.Select(p => p.Scener).ToList();

        editProductionGeneral.Party = Production.ProductionsParties.FirstOrDefault()?.Party;

        if (editProductionGeneral != null)
        {
            if (Production.ProductionsParties.Any() && Production.ProductionsParties.FirstOrDefault().PartyCategoryId > 0)
                editProductionGeneral.PartyCategoryId = Production.ProductionsParties.FirstOrDefault().PartyCategoryId.ToString();
            else
                editProductionGeneral.PartyCategoryId = "0";

            var rank = Production.ProductionsParties.FirstOrDefault()?.Rank;
            editProductionGeneral.PartyRank = rank.GetValueOrDefault();
        }
    }
}