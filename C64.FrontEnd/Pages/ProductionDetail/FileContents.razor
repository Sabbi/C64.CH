@namespace C64.FrontEnd.Pages

@inject IFileStorageService fileStorageService
@inject IArchiveService archiveService

<BootstrapModal @ref="bootstrapModal" Title="@title" Size="BootstrapModal.ModalSize.Large">
    <Content>
        @if (archiveService.ArchiveInfo != null)
        {
            @if (archiveService.ArchiveInfo.CompressedFileInfos.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Filename</th>

                            <th>Created</th>
                            <th>Size</th>
                            <th>Compressed</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var file in archiveService.ArchiveInfo?.CompressedFileInfos)
                        {
                            <tr>
                                <td>@file.FileName</td>
                                <td>@file.Created.ToShortDateString()</td>
                                <td>@file.Size</td>
                                <td>@file.CompressedSize</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No files found, possible corrupt archive</p>
            }

            @if (archiveService.ArchiveInfo.NumberOfD64Files > 0)
            {
                <hr />
                <div class="d64-body">
                    <h5>Contents of the contained .d64-Files:</h5>
                    @for (var i = 0; i < archiveService.ArchiveInfo.NumberOfD64Files; i++)
                    {
                        var img = archiveService.ArchiveInfo.CompressedFileInfos.Where(p => p.IsD64).ElementAt(i);
                        <hr />
                        <div class="d64-content">
                            @img.FileName
                            <div class="image">
                                <img src="/data/productions/diskimage/d64-@ProductionFileId-@(i).png" />
                            </div>
                        </div>
                    }
                </div>
            }

        }
    </Content>
    <Footer>
        <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
    </Footer>
</BootstrapModal>

@code {
    [Parameter]
    public int ProductionFileId { get; set; }

    [Parameter]
    public string ProductionFilename { get; set; }

    private string title => "Contents of " + ProductionFilename;

    private BootstrapModal bootstrapModal;

    private int size { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var file = await fileStorageService.GetFileContents("productionfiles", ProductionFilename);

        size = file.Length;
        archiveService.Load(file);
    }

    private async Task Close()
    {
        await bootstrapModal.Close();
    }

}