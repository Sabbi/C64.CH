@namespace C64.FrontEnd.Pages

@inject ILogger<WriteComment>  logger;

<BootstrapModal @ref="bootstrapModal" Title="@($"Write your comment for {ProductionName}")">
    <Content>
        <EditForm Model="@writeCommentEditForm" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Your comment:</label><button class="btn btn-xs btn-primary float-right" type="button" @onclick="ToogleShowMarkdDown">Toggle Preview</button>
                <div>
                    @if (showMarkDown)
                    {
                        <div class="border border-secondary p-3">
                            <RenderMarkdown MarkdownContent="@writeCommentEditForm.Comment" />
                        </div>
                    }
                    else
                    {
                        <InputTextArea rows="10" class="form-control" @bind-Value="@writeCommentEditForm.Comment" />
                        <ValidationMessage For="@(() => writeCommentEditForm.Comment)" />
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <button class="btn btn-primary" type="Submit">Save and add your comment</button>
                </div>
                <div class="col-6 text-right">
                    <BSButton class="btn btn-secondary" @onclick="@(() => bootstrapModal.Cancel())">Cancel</BSButton>
                </div>
            </div>
        </EditForm>
        <div class="pt-2">
            <p> Please: Be friendly, be fair. Abusive, offensive, insulting etc. comments are going to be deleted, and so are you in case you ignore good manners repeatedly. Don't try HTML-Codes, but you may use Markdown. Enters/Newlines are fine.</p>
        </div>
    </Content>
</BootstrapModal>

@code {

    [Parameter]
    public int ProductionId { get; set; }

    [Parameter]
    public string ProductionName { get; set; }

    [Parameter]
    public EventCallback<string> OnCommented { get; set; }

    private WriteCommentEditForm writeCommentEditForm = new WriteCommentEditForm();

    private BootstrapModal bootstrapModal;

    private bool showMarkDown = false;

    private void ToogleShowMarkdDown()
    {
        showMarkDown = !showMarkDown;
    }

    private async Task HandleSubmit()
    {
        await bootstrapModal.BlazoredModal.Close(ModalResult.Ok(writeCommentEditForm.Comment));
    }
}