@namespace C64.FrontEnd.Pages

@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject ILogger<WriteComment>  logger;

<BootstrapModal @ref="bootstrapModal" Title="@($"Edit additional information of {Production.Name}")" Size="BootstrapModal.ModalSize.Large">
    <Content>
        <EditForm Model="editProductionAdditional" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Remarks:</label>
                <div>
                    <InputTextArea rows="4" class="form-control" @bind-Value="@editProductionAdditional.Remarks" placeholder="Remarks" />
                    <ValidationMessage For="@(() => editProductionAdditional.Remarks)" />
                </div>
            </div>
            <div class="form-group">
                <label>Hidden Parts:</label>
                @for (var i = 0; i < editProductionAdditional.HiddenParts.Count; i++)
                {
                    var local = i;
                    <div class="pb-2">
                        <InputTextArea rows="4" class="form-control" @bind-Value="@editProductionAdditional.HiddenParts[local].Description" placeholder="Hidden part" />
                    </div>
                }
                <div class="pb-2">
                    <InputTextArea rows="4" class="form-control" @bind-Value="@newHiddenPart" placeholder="Hidden part" />
                </div>
            </div>
            <div class="form-group">
                <label>Video-Standard:</label>
                <div>
                    <InputSelect @bind-Value="editProductionAdditional.VideoType" class="form-control">
                        @foreach (var item in Enum.GetValues(typeof(VideoType)))
                        {
                            <option value="@item"><EnumDisplayNameAttribute DisplayNameFor="item" /></option>
                        }
                    </InputSelect>
                </div>
            </div>
            <button class=" btn btn-primary" type="submit">Update Production</button>
        </EditForm>
    </Content>
</BootstrapModal>

@code {
    [Parameter]
    public Production Production { get; set; } = new Production();

    [Parameter]
    public IUnitOfWork unitOfWork { get; set; }

    private BootstrapModal bootstrapModal;

    private EditProductionAdditional editProductionAdditional = new EditProductionAdditional();

    private string newHiddenPart = string.Empty;

    private async Task OnValidSubmit()
    {
        var productionHistory = new ProductionHistoryHandler(unitOfWork, Production, httpContext.HttpContext.GetUserId());

        if (string.IsNullOrWhiteSpace(editProductionAdditional.Remarks))
            editProductionAdditional.Remarks = null;

        productionHistory.AddHistory(ProductionEditProperty.Remarks, editProductionAdditional.Remarks);

        if (!string.IsNullOrWhiteSpace(newHiddenPart))
            editProductionAdditional.HiddenParts.Add(new HiddenPart { Description = newHiddenPart });

        productionHistory.AddHistory(ProductionEditProperty.HiddenParts, editProductionAdditional.HiddenParts);

        productionHistory.AddHistory(ProductionEditProperty.VideoType, editProductionAdditional.VideoType);

        productionHistory.Apply();

        await unitOfWork.Commit();

        await bootstrapModal.Close();
    }

    protected override void OnInitialized()
    {
        editProductionAdditional = new EditProductionAdditional();
        editProductionAdditional.Remarks = Production.Remarks;
        editProductionAdditional.VideoType = Production.VideoType;

        foreach (var hiddenPart in Production.HiddenParts)
        {
            editProductionAdditional.HiddenParts.Add(new HiddenPart { HiddenPartId = hiddenPart.HiddenPartId, Description = hiddenPart.Description });
        }
    }
}