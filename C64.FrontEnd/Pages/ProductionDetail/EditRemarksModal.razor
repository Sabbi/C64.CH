@namespace C64.FrontEnd.Pages

@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject ILogger<WriteComment>  logger;

<BootstrapModal @ref="bootstrapModal" Title="@($"Edit additional information of {Production.Name}")" Size="BootstrapModal.ModalSize.Large">
    <Content>
        <EditForm Model="editProductionAdditional" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Remarks:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@editProductionAdditional.Remarks" />
                    <ValidationMessage For="@(() => editProductionAdditional.Remarks)" />
                </div>
            </div>
            <div class="form-group">
                <label>Hidden Parts:</label>
                <div>@editProductionAdditional.HiddenParts.Count()</div>
                @for (var i = 0; i < editProductionAdditional.HiddenParts.Count; i++)
                {
                    var local = i;
                    <div>
                        <InputText class="form-control" @bind-Value="@editProductionAdditional.HiddenParts[local].Description" />
                    </div>
                }
            </div>
            <button class=" btn btn-primary" type="submit">Update Production</button>
        </EditForm>
    </Content>
</BootstrapModal>

@code {
    [Parameter]
    public Production Production { get; set; } = new Production();

    [Parameter]
    public IUnitOfWork unitOfWork { get; set; }

    private BootstrapModal bootstrapModal;

    private EditProductionAdditional editProductionAdditional = new EditProductionAdditional();

    private async Task OnValidSubmit()
    {
        logger.LogInformation("OnValidSubmit");

        Production.Remarks = editProductionAdditional.Remarks;

        //var productionHistory = new ProductionHistoryHandler(unitOfWork, Production, httpContext.HttpContext.GetUserId());
        //productionHistory.AddHistory(ProductionEditProperty.Name, editProductionGeneral.Name);
        //productionHistory.AddHistory(ProductionEditProperty.Aka, editProductionGeneral.Aka);
        //productionHistory.AddHistory(ProductionEditProperty.SubCategory, editProductionGeneral.SubCategory);

        //productionHistory.AddHistory(ProductionEditProperty.ReleaseDate, new PartialDateApplierData { Date = editProductionGeneral.ReleasedOn.Date, Type = editProductionGeneral.ReleasedOn.Type });
        //productionHistory.AddHistory(ProductionEditProperty.Party, new PartyApplierData { PartyId = editProductionGeneral.Party?.PartyId ?? 0, Category = editProductionGeneral.PartyCategory, Rank = editProductionGeneral.PartyRank });
        //productionHistory.AddHistory(ProductionEditProperty.Groups, editProductionGeneral.SelectedGroups);

        //productionHistory.Apply();

        //await unitOfWork.Commit();

        await bootstrapModal.Close();
    }

    protected override void OnInitialized()
    {

        editProductionAdditional = new EditProductionAdditional();
        editProductionAdditional.Remarks = Production.Remarks;
        editProductionAdditional.HiddenParts = Production.HiddenParts.ToList();
        editProductionAdditional.HiddenParts.Add(new HiddenPart());
    }
}