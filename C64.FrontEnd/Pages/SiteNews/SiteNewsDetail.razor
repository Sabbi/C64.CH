@namespace C64.FrontEnd.Pages

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject IModalService Modal
@inject IToastService toastService

<li class="my-1">
    <div class="row">
        @if (SiteInfo.Show)
        {
            <div class="col-12 mb-1">
                <div class="row">
                    <div class="col-md-6">
                        <h5 class="d-inline">
                            @SiteInfo.Title
                        </h5>
                    </div>
                    <div class="col-md-6">
                        @if (SiteInfo.User != null && string.IsNullOrEmpty(SiteInfo.Writer))
                        {
                            <div class="small text-right"><a href="/profile/@SiteInfo.UserId/@SiteInfo.User.UserName.UrlEncode()">@SiteInfo.User</a> @@ @SiteInfo.PublishedAt.ToLongDateString()</div>
                        }
                        else
                        {
                            <div class="small text-right">@SiteInfo.WriterFixed @@ @SiteInfo.PublishedAt.ToLongDateString()</div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-12">
                <div>
                    <RenderMarkdown MarkdownContent="@SiteInfo.Text?.Replace("<br>", "\n")" />
                </div>

                <AuthorizeView Roles="Moderator">
                    <Authorized>
                        <div class="text-right">
                            <a href="" @onclick:preventDefault @onclick="(() => StartEdit())" class="btn-sm btn-success">
                                <i class="far fa-edit"></i>Edit
                            </a>&nbsp;
                            <a href="" @onclick:preventDefault @onclick="(() => Tweet())" class="btn-sm btn-warning">
                                <i class="fab fa-twitter"></i>Tweet @(SiteInfo.TweetedAt == null ? "" : $"(Last tweeted: {SiteInfo.TweetedAt}")
                            </a>
                        </div>
                    </Authorized>
                </AuthorizeView>
                <hr>
            </div>
        }
        else
        {
            <AuthorizeView Roles="Moderator">
                <Authorized>
                    <div class="col-12 mb-2" style="background-color:#c0c0c0">
                        <h4 class="d-inline">
                            <small><del>@SiteInfo.Title</del></small>
                        </h4>
                        <div class="float-right">
                            <a href="" @onclick:preventDefault @onclick="(() => StartEdit())" class="btn-sm btn-success">
                                <i class="far fa-edit"></i>Edit
                            </a>
                        </div>
                    </div>
                </Authorized>
            </AuthorizeView>
        }
    </div>
</li>

@code {
    [Parameter]
    public SiteInfo SiteInfo { get; set; }

    [Parameter]
    public EventCallback<SiteInfo> OnEdited { get; set; }

    private SiteInfo back = new SiteInfo();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task StartEdit()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(SiteInfo), SiteInfo);
        var reference = Modal.Show<EditSiteInfoModal>("", parameters);

        var result = await reference.Result;

        if (!result.Cancelled)
        {
            await OnEdited.InvokeAsync(SiteInfo);
        }
    }

    private async Task Tweet()
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(TweetSiteInfoModal.SiteInfo), SiteInfo);
        var reference = Modal.Show<TweetSiteInfoModal>("", parameters);

        var result = await reference.Result;

        if (!result.Cancelled)
        {
            SiteInfo.TweetedAt = DateTime.Now;
            await OnEdited.InvokeAsync(SiteInfo);
            toastService.ShowSuccess("Tweet sent out!");
        }
    }
}