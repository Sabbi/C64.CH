@page "/parties/{PartyId:int}"
@page "/parties/{PartyId:int}/{PartyName}"

@using Microsoft.Extensions.DependencyInjection
@inherits OwningComponentBase

@implements IDisposable

@inject IJSRuntime jsRuntime
@inject ILogger<PartyDetail> logger
@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject IModalService Modal
@inject IToastService toastService

@if (party != null)
{
    <Box>
        <Title>
            Details of @party.Name
            <div class="float-right pr-3 position-absolute" style="right:0; top:5px">
                <select class="form-control d-inline" id="groupEditSelect" @onchange="OnSelectEdit">
                    <option value="0">Edit Party</option>
                    <option value="general">- General Info</option>
                    <optgroup label="---------------------------"></optgroup>
                    <option value="viewHistory">View history</option>
                </select>
            </div>
        </Title>
        <Content>
            <PartyOverview Party="@party" />
            @if (productionIds != null)
            {
                <h5>Productions released at @party.Name:</h5>
                <ProductionList ProductionIds="@productionIds" BaseUrl="@baseUrl" />
            }
        </Content>
    </Box>
}

@code {

    [Parameter]
    public int PartyId { get; set; }

    // Fake, only for nicer URL.
    [Parameter]
    public string PartyName { get; set; }

    private IUnitOfWork unitOfWork;

    private Party party;

    private string baseUrl => $"parties/{PartyId}/{PartyName}";
    private IEnumerable<int> productionIds;

    protected override async Task OnParametersSetAsync()
    {
        await LoadParty(PartyId);
    }

    private async Task OnSelectEdit(ChangeEventArgs args)
    {
        if (httpContext.HttpContext.GetUserId() == null && args.Value.ToString() != "viewHistory")
        {
            Modal.Show<LoginModal>();
            return;
        }
        IModalReference reference;

        if (args.Value.ToString() == "general")
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(EditPartyModal.Party), party);
            parameters.Add(nameof(EditPartyModal.unitOfWork), unitOfWork);
            reference = Modal.Show<EditPartyModal>("", parameters);
            await reference.Result;
        }
        else if (args.Value.ToString() == "viewHistory")
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ViewHistoryModal.Party), party);
            reference = Modal.Show<ViewHistoryModal>("", parameters);
            await reference.Result;
        }
        await jsRuntime.InvokeAsync<object>("ResetGroupEditSelect");
    }

    private async Task LoadParty(int id)
    {
        var sw = new System.Diagnostics.Stopwatch();
        sw.Start();

        unitOfWork = ScopedServices.GetRequiredService<IUnitOfWork>();

        party = await unitOfWork.Parties.GetDetails(id);

        productionIds = party.ProductionsParties.Select(p => p.ProductionId);

        sw.Stop();

        logger.LogInformation("Loaded party {name} in {milliseconds}ms", party.Name, sw.ElapsedMilliseconds);

        StateHasChanged();
    }
}