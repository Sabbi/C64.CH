@namespace C64.FrontEnd.Pages

@using C64.FrontEnd.Validators;

@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject ILogger<WriteComment>  logger;
@inject IToastService toastService

<BootstrapModal @ref="bootstrapModal" Title="Add new party" Size="BootstrapModal.ModalSize.Large">
    <Content>
        <PartyForm OnValidSubmit="OnValidSubmit" Countries="@countries" EditParty="@editParty" ShowExistsWarning="@showExistsWarning" OnHandleChanged="@OnBlur" />
    </Content>
</BootstrapModal>

@code {

    [Parameter]
    public EventCallback OnClosed { get; set; }

    [Parameter]
    public IUnitOfWork unitOfWork { get; set; }

    private bool showExistsWarning { get; set; }

    private BootstrapModal bootstrapModal;

    private EditParty editParty = new EditParty();

    private IEnumerable<Country> countries = new List<Country>();

    private async Task OnBlur()
    {
        var existingParty = await unitOfWork.Parties.Find(p => p.Name.Equals(editParty.Name));
        showExistsWarning = existingParty.Any();
    }

    private async Task OnValidSubmit()
    {

        var party = new Party
        {
            CountryId = editParty.CountryId,
            Description = editParty.Description,
            Email = editParty.Email,
            From = editParty.From,
            Location = editParty.Location,
            Name = editParty.Name,
            Organizers = editParty.Organizers,
            To = editParty.To,
            Url = editParty.Url
        };

        unitOfWork.Parties.Add(party);
        await unitOfWork.Commit();

        var partyHistory = HistoryHandlerFactory.Get(HistoryEntity.Party, unitOfWork, party, httpContext.HttpContext.GetUserId(), httpContext.HttpContext.RemoteIp());

        partyHistory.AddHistory(HistoryEditProperty.AddParty, party);
        partyHistory.Apply();

        await unitOfWork.Commit();

        await OnClosed.InvokeAsync(null);

        await bootstrapModal.Close(party);

    }

    protected override async Task OnInitializedAsync()
    {
        countries = (await unitOfWork.Countries.Find(p => p.Selectable)).OrderBy(p => p.Name);
        editParty = new EditParty();
    }
}