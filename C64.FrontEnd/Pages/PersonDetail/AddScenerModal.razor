@namespace C64.FrontEnd.Page

@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject ILogger<WriteComment>  logger
@inject IToastService toastService
@inject NavigationManager navigationManager

<BootstrapModal @ref="bootstrapModal" Title="Add new scener" Size="BootstrapModal.ModalSize.Large">
    <Content>
        <ScenerForm OnValidSubmit="OnValidSubmit" Countries="@countries" EditScener="@editScener" />
    </Content>
</BootstrapModal>

@code {

    [Parameter]
    public EventCallback OnClosed { get; set; }

    [Parameter]
    public IUnitOfWork unitOfWork { get; set; }

    private BootstrapModal bootstrapModal;

    private EditScener editScener = new EditScener();

    private Scener scener = new Scener();

    private IEnumerable<Country> countries = new List<Country>();

    private async Task OnValidSubmit()
    {
        var scener = new Scener
        {
            Handle = editScener.Handle,
            Aka = editScener.Aka,
            RealName = editScener.RealName,
            Birthday = editScener.Birthday.Date,
            BirthdayType = editScener.Birthday.Type,
            Location = editScener.Location,
            CountryId = editScener.CountryId,
        };

        if (editScener.SelectedJobs.Any())
        {
            foreach (var selectedJob in editScener.SelectedJobs)
            {
                scener.Jobs.Add(new ScenersJobs { Job = selectedJob });
            }
        }

        unitOfWork.Sceners.Add(scener);
        await unitOfWork.Commit();

        var scenerHistory = HistoryHandlerFactory.Get(HistoryEntity.Scener, unitOfWork, scener, httpContext.HttpContext.GetUserId(), httpContext.HttpContext.RemoteIp());
        scenerHistory.AddHistory(HistoryEditProperty.AddScener, scener);
        scenerHistory.Apply();
        await unitOfWork.Commit();

        navigationManager.NavigateTo($"/sceners/{scener.ScenerId}/{scener.Handle.UrlEncode()}");
    }

    protected override async Task OnInitializedAsync()
    {
        if (!httpContext.HttpContext.CanEdit())
        {
            navigationManager.NavigateTo("/help/contribute");
            toastService.ShowInfo("Editing requires an updated account - please drop us a note to have your account updated!");
            return;
        }

        countries = (await unitOfWork.Countries.Find(p => p.Selectable)).OrderBy(p => p.Name);
        editScener = new EditScener();
        editScener.ShowRealName = true;
    }
}