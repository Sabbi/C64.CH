@namespace C64.FrontEnd.Pages

@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject ILogger<WriteComment>  logger;

<BootstrapModal @ref="bootstrapModal" Title="@($"Add Group to {Scener.Handle}")" Size="BootstrapModal.ModalSize.Large">
    <Content>
        <EditForm Model="addScenerGroupModel" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <div class="row">
                    <div class="col-4">
                        Group*:
                    </div>
                    <div class="col-8">
                        <BlazoredTypeahead TValue="Group" TItem="Group" ValueExpression="@(() => Group)" Value="@Group" ValueChanged="OnValueChanged" SearchMethod="SearchGroup">
                            <SelectedTemplate Context="group">
                                @group.Name
                            </SelectedTemplate>
                            <ResultTemplate Context="group">
                                @group.GroupId (@group.Name)
                            </ResultTemplate>
                            <NotFoundTemplate>
                                Group not found
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                    </div>
                </div>
                * Groups already assigned to this scener do not show up anymore
            </div>
            @if (!disabled)
            {
                <div class="form-group">
                    <label>Jobs:</label>
                    <div>
                        <select @onchange="OnSelectJob" TValue="Job" class="form-control">
                            <option value="0">Select job:</option>
                            @foreach (var item in Enum.GetValues(typeof(Job)))
                            {
                                if ((Job)item != Job.Undefined)
                                {
                                    <option value="@item"><EnumDisplayNameAttribute DisplayNameFor="item" /></option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <h5>
                    @foreach (var job in addScenerGroupModel.SelectedJobs)
                    {
                        <span class="badge badge-primary" href="">@job <i class="fas fa-backspace cursor-pointer" @onclick="(() => RemoveJob(job))"></i> </span>
                    }
                </h5>

                <div class="form-group">
                    <label>Joined on:</label>
                    <div>
                        <InputPartialDate @bind-Value="@addScenerGroupModel.Joined" StartingYear="1982" EndingYear="DateTime.Now.Year" />
                    </div>
                </div>
                <div class="form-group">
                    <label>Left on:</label>
                    <div>
                        <InputPartialDate @bind-Value="@addScenerGroupModel.Left" StartingYear="1982" EndingYear="DateTime.Now.Year" />
                    </div>
                </div>

            }
            @if (!disabled)
            {
                <button class="btn btn-primary" type="submit">Add as Member</button>
            }
            <div class="float-right">
                <button class="btn btn-warning" type="button" @onclick="(() => bootstrapModal.Cancel())">Cancel</button>
            </div>
        </EditForm>
    </Content>
</BootstrapModal>

@code {
    [Parameter]
    public Group Group { get; set; }

    [Parameter]
    public Scener Scener { get; set; } = new Scener();

    [Parameter]
    public EventCallback OnClosed { get; set; }

    [Parameter]
    public IUnitOfWork unitOfWork { get; set; }

    private bool disabled = true;

    private BootstrapModal bootstrapModal;

    private AddScenerGroupModel addScenerGroupModel = new AddScenerGroupModel();

    private void OnValueChanged(Group selectedGroup)
    {
        Group = selectedGroup;
        addScenerGroupModel.Group = selectedGroup;
        disabled = Group == null;
    }

    private void OnSelectJob(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "0")
            return;

        var parsed = (Job)Enum.Parse(typeof(Job), e.Value.ToString());

        if (!addScenerGroupModel.SelectedJobs.Contains(parsed))
            addScenerGroupModel.SelectedJobs.Add(parsed);
    }

    private void RemoveJob(Job job)
    {
        addScenerGroupModel.SelectedJobs.Remove(job);
    }

    private async Task<IEnumerable<Group>> SearchGroup(string searchText)
    {

        int parsedId;
        bool isInt = int.TryParse(searchText, out parsedId);

        var sceners = (await unitOfWork.Groups.FindWithSceners(p => p.Name.Contains(searchText) || (isInt && p.GroupId == parsedId))).ToList();

        // TODO: Linqify
        foreach (var inGroup in Scener.ScenersGroups.Select(p => p.Group))
            sceners.Remove(inGroup);

        return sceners;
    }

    private async Task OnValidSubmit()
    {
        var groupHistory = HistoryHandlerFactory.Get(HistoryEntity.Group, unitOfWork, Group, httpContext.HttpContext.GetUserId(), httpContext.HttpContext.RemoteIp());

        var addGroupMember = new AddGroupMember
        {
            Scener = Scener,
            SelectedJobs = addScenerGroupModel.SelectedJobs,
            JoinedDate = addScenerGroupModel.Joined.Date,
            JoinedDateType = addScenerGroupModel.Joined.Type,
            LeftDate = addScenerGroupModel.Left.Date,
            LeftDateType = addScenerGroupModel.Left.Type
        };

        groupHistory.AddHistory(HistoryEditProperty.AddGroupMember, addGroupMember);
        groupHistory.Apply();
        await unitOfWork.Commit();

        await OnClosed.InvokeAsync(null);
        await bootstrapModal.Close();
    }

    private class AddScenerGroupModel
    {
        public Group Group { get; set; }
        public IList<Job> SelectedJobs = new List<Job>();
        public PartialDate Joined { get; set; } = new PartialDate();
        public PartialDate Left { get; set; } = new PartialDate();
    }
}