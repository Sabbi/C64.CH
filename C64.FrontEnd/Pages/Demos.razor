@inject IUnitOfWork unitOfWork
@inject NavigationManager navigationManager
@inject ILogger<Demos> logger

@page "/productions/demos"
<Box>
    <Title>Demos - Search, choose and decide!</Title>
    <Content>
        <div class="form-group row">
            <label for="search" class="col-sm-3 col-form-label">Search:</label>
            <div class="col-sm-9">
                <div class="input-group">
                    <input class="form-control" placeholder="Search" @onkeypress="TestForEnter" @bind-value:event="oninput" @bind-value="@simpleSearchTerm" />
                    &nbsp;
                    <button class="btn btn-primary" @onclick="DoSearch"><i class="fas fa-search"></i></button>
                </div>
            </div>
            <hr />
        </div>
        <div class="form-group row">
            <label for="search" class="col-sm-3 col-form-label">Show demos from:</label>
            <div class="col-sm-9">
                <SelectPicker KeyValuePairs="groupData" LiveSearch="true" OnSelect="GroupSelect" />&nbsp;<button class="btn btn-primary" @onclick="ShowByGroup">Go</button>
            </div>
            <hr />
        </div>
        <div class="form-group row">
            <label for="search" class="col-sm-3 col-form-label">Show demos from:</label>
            <div class="col-sm-9">
                <SelectPicker KeyValuePairs="yearData" LiveSearch="false" OnSelect="YearSelect" />&nbsp;<button class="btn btn-primary" @onclick="ShowByYear">Go</button>
            </div>
            <hr />
        </div>
    </Content>
</Box>

@code {

    private Dictionary<string, string> groupData = new Dictionary<string, string>();
    private Dictionary<string, string> yearData = new Dictionary<string, string>();

    private string selectedGroup;
    private string selectedYear;

    private string simpleSearchTerm;

    private void TestForEnter(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
            DoSearch();
    }

    private void DoSearch()
    {
        if (string.IsNullOrEmpty(term))
            return;

        navigationManager.NavigateTo($"/search/?search={simpleSearchTerm}");
    }

    private void GroupSelect(string group)
    {
        selectedGroup = group;
    }

    private void YearSelect(string year)
    {
        logger.LogInformation("YearSelect: {year}", year);
        selectedYear = year;
    }

    protected override void OnInitialized()
    {

        var groups = unitOfWork.Groups.GetAll().OrderBy(p => p.Name);

        foreach (var group in groups)
        {
            groupData.Add(group.GroupId.ToString(), group.Name);
        }

        for (var i = 1982; i <= DateTime.Now.Year; i++)
        {
            yearData.Add(i.ToString(), i.ToString());
        }

        YearSelect("1982");

    }

    private void ShowByGroup()
    {
        if (selectedGroup != null && selectedGroup != "0")
        {
            var groupName = groupData.FirstOrDefault(p => p.Key == selectedGroup);
            navigationManager.NavigateTo($"/groups/{selectedGroup}/{groupName.Value.UrlEncode()}");
        }
    }

    private void ShowByYear()
    {
        logger.LogInformation("Show demos for year {year}", selectedYear);
        if (selectedYear != null && selectedYear != "0")
        {

            navigationManager.NavigateTo($"/years/{selectedYear}");
        }
    }

}