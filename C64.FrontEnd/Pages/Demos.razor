@inject IUnitOfWork unitOfWork
@inject NavigationManager navigationManager
@inject ILogger<Demos> logger

@page "/productions/demos"
<MyPageTitle Title="Demos Overview" />
<Box MarginBottom="4">
    <Title>Demos - Search, choose and decide!</Title>
    <Content>
        <div class="form-group row">
            <label for="search" class="col-sm-3 col-form-label">Search:</label>
            <div class="col-sm-9">
                <div class="input-group">
                    <input class="form-control" placeholder="Search" @onkeypress="TestForEnter" @bind-value:event="oninput" @bind-value="@simpleSearchTerm" />
                    &nbsp;
                    <button class="btn btn-primary" @onclick="DoSearch"><i class="fas fa-search"></i></button>
                </div>
            </div>
            <hr />
        </div>
        <div class="form-group row">
            <label for="search" class="col-sm-3 col-form-label">Show demos from:</label>
            <div class="col-sm-9">
                @if (groupData.Any())
                {
                    <SelectPicker KeyValuePairs="groupData" LiveSearch="true" OnSelect="GroupSelect" /><text>&nbsp;</text><button class="btn btn-primary" @onclick="ShowByGroup">Go</button>
                }
            </div>
            <hr />
        </div>
        <div class="form-group row">
            <label for="search" class="col-sm-3 col-form-label">Show demos from:</label>
            <div class="col-sm-9">
                @if (yearData.Any())
                {
                    <SelectPicker KeyValuePairs="yearData" LiveSearch="false" OnSelect="YearSelect" /><text>&nbsp;</text><button class="btn btn-primary" @onclick="ShowByYear">Go</button>
                }
            </div>
            <hr />
        </div>
        <div class="form-group row">
            <label for="search" class="col-sm-3 col-form-label">Show demos by*:</label>
            <div class="col-sm-9">
                @if (scenerData.Any())
                {
                    <SelectPicker KeyValuePairs="scenerData" LiveSearch="true" OnSelect="ScenerSelect" /><text>&nbsp;</text><button class="btn btn-primary" @onclick="ShowByScener">Go</button>
                }
            </div>
            <hr />
        </div>
        <div class="form-group row">
            <label for="search" class="col-sm-10 col-form-label">* as of now, sceners are more than far from complete, sorry :-/</label>
        </div>
    </Content>
</Box>
<Box MarginBottom="4">
    <Title>Full Lists</Title>
    <Content>
        <div class="text-center">
            <h5>Show demos by name</h5>
            <h5>
                <a class="badge badge-primary" href="/productions/demos/demoname/other">#</a>
                @for (int i = 65; i < 91; i++)
                {
                    <span>&nbsp;</span>
                    <a class="badge badge-primary" href="/productions/demos/demoname/@((char)i)">@((char)i)</a>
                }
            </h5>
            <h5>Show demos by group</h5>
            <h5>
                <a class="badge badge-primary" href="/productions/demos/groupname/other">#</a>
                @for (int i = 65; i < 91; i++)
                {
                    <span>&nbsp;</span>
                    <a class="badge badge-primary" href="/productions/demos/groupname/@((char)i)">@((char)i)</a>
                }
            </h5>
        </div>
    </Content>
</Box>
<Box MarginBottom="4">
    <Title>All time top lists</Title>
    <Content>
        <div class="row">
            <div class="col-md-3">
                <a href="/productions/demos/toprated">
                    <h5>Top rated demos</h5>
                </a>
            </div>
            <div class="col-md-3">
                <a href="/productions/demos/topdownloaded">
                    <h5>Top downloaded demos</h5>
                </a>
            </div>
            <div class="col-md-3">
                <a href="/productions/demos/latestadded">
                    <h5>Latest added</h5>
                </a>
            </div>
            <div class="col-md-3">
                <a href="/productions/demos/latestreleased">
                    <h5>Latest released</h5>
                </a>
            </div>
        </div>
    </Content>
</Box>

<Box>
    <Title>More top lists</Title>
    <Content>
        <div class="row">
            @if (groups.Count >= 1)
            {
                <div class="col-sm-6">
                    <h5 class="text-center">Most Active Groups</h5>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Group</th>
                                <th class="text-right">Releases</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < 10 && i < groups.Count; i++)
                            {
                                var currentGroup = groups.OrderByDescending(p => p.NumberOfReleases)?.ElementAt(i);
                                <tr>
                                    <td>@(i + 1)</td>
                                    <td>
                                        <a href="/groups/@currentGroup.GroupId/@currentGroup.Name.UrlEncode()">
                                            @currentGroup.Name
                                        </a>
                                    </td>
                                    <td class="text-right">@currentGroup.NumberOfReleases</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            @if (topRatedGroups.Count >= 1)
            {
                <div class="col-sm-6">
                    <h5 class="text-center">Top Rated Groups (20 ratings min.)</h5>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Group</th>
                                <th class="text-right">Rating</th>
                                <th class="text-right">No. of Ratings</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < 10 && i < topRatedGroups.Count; i++)
                            {
                                <tr>
                                    <td>@(i + 1)</td>
                                    <td>
                                        <a href="/groups/@topRatedGroups.ElementAt(i).GroupId/@topRatedGroups.ElementAt(i).Name.UrlEncode()">
                                            @topRatedGroups.ElementAt(i).Name
                                        </a>
                                    </td>
                                    <td class="text-right">@topRatedGroups.ElementAt(i).AverageRating.ToString("0.##")</td>
                                    <td class="text-right">@topRatedGroups.ElementAt(i).NumberOfRatings</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </Content>
</Box>

@code {

    private Dictionary<string, string> groupData = new Dictionary<string, string>();
    private Dictionary<string, string> yearData = new Dictionary<string, string>();
    private Dictionary<string, string> scenerData = new Dictionary<string, string>();

    private string selectedGroup;
    private string selectedYear;
    private string selectedScener;

    private string simpleSearchTerm;

    private List<Group> groups = new List<Group>();

    private List<Group> topRatedGroups = new List<Group>();
    private List<Scener> sceners = new List<Scener>();

    private void TestForEnter(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
            DoSearch();
    }

    private void DoSearch()
    {
        if (string.IsNullOrEmpty(simpleSearchTerm))
            return;

        navigationManager.NavigateTo($"/productions/demos/search/?search={simpleSearchTerm}");
    }

    private void GroupSelect(string group)
    {
        selectedGroup = group;
    }

    private void YearSelect(string year)
    {
        logger.LogInformation("YearSelect: {year}", year);
        selectedYear = year;
    }

    private void ScenerSelect(string scener)
    {
        selectedScener = scener;
    }

    protected override async Task OnInitializedAsync()
    {

        sceners = (await unitOfWork.Sceners.FindWithGroups(p => true)).OrderBy(p => p.Handle).ToList();

        scenerData.Add("0", "Choose scener:");

        foreach (var scener in sceners)
        {
            scenerData.Add(scener.ScenerId.ToString(), scener.HandleWithGroups());
        }

        groups = unitOfWork.Groups.GetAll().OrderBy(p => p.Name).ToList();

        foreach (var group in groups)
        {
            groupData.Add(group.GroupId.ToString(), group.Name);
        }

        topRatedGroups = groups.OrderByDescending(p => p.AverageRating).Where(p => p.NumberOfRatings > 20).Take(10).ToList();

        for (var i = 1982; i <= DateTime.Now.Year; i++)
        {
            yearData.Add(i.ToString(), i.ToString());
        }

        YearSelect("1982");

    }

    private void ShowByGroup()
    {
        if (selectedGroup != null && selectedGroup != "0")
        {
            var groupName = groupData.FirstOrDefault(p => p.Key == selectedGroup);
            navigationManager.NavigateTo($"/groups/{selectedGroup}/{groupName.Value.UrlEncode()}");
        }
    }

    private void ShowByYear()
    {
        logger.LogInformation("Show demos for year {year}", selectedYear);
        if (selectedYear != null && selectedYear != "0")
        {

            navigationManager.NavigateTo($"/productions/demos/year/{selectedYear}");
        }
    }

    private void ShowByScener()
    {
        if (selectedScener != null && selectedScener != "0")
        {
            var scenerHandle = scenerData.FirstOrDefault(p => p.Key == selectedScener);
            navigationManager.NavigateTo($"/sceners/{selectedScener}/{scenerHandle.Value.UrlEncode()}");
        }
    }

}