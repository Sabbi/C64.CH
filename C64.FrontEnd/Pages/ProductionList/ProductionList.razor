@namespace C64.FrontEnd.Pages
@implements IDisposable

@inject NavigationManager navigationManager
@inject IUnitOfWork unitOfWork
@inject ILogger<ProductionList> logger

@if (productions != null)
{
    <div class="text-right"><Sorter Sorted="OnSorted" SorterData="@sorterData" /></div>
    <PaginatorRecordInfo CurrentPage="currentPage" PageSize="pageSize" TotalNumberOfRecords="totalNumberOfRecords" />
    <Paginator CurrentPage="currentPage" TotalAmountPages="totalNumberOfPages" SelectedPage="OnSelectPage"></Paginator>
    <div class="row">
        @foreach (var prod in productions)
        {
            <div class="col-md-6 col-lg-4 col-xl-3 mb-4">
                <ProdInList Production="prod" />
            </div>
        }
    </div>
    <PaginatorRecordInfo CurrentPage="currentPage" PageSize="pageSize" TotalNumberOfRecords="totalNumberOfRecords" />
    <Paginator CurrentPage="currentPage" TotalAmountPages="totalNumberOfPages" SelectedPage="OnSelectPage"></Paginator>
}

@code {

    [Parameter]
    public string BaseUrl { get; set; }

    [Parameter]
    public IEnumerable<int> ProductionIds { get; set; }

    private IEnumerable<Production> productions;

    // Pagination
    private int pageSize = 12;
    private int currentPage = 1;
    private int totalNumberOfPages = 0;
    private int totalNumberOfRecords = 0;

    // Sorting
    private SorterData sorterData = new SorterData();

    protected override void OnInitialized()
    {
        navigationManager.LocationChanged += OnLocationChanged;

        // Init Sorter
        sorterData.CurrentSortColumn = "Name";
        sorterData.IsSortedAscending = true;
        sorterData.SorterItems.Add(new SorterItem("Name", "Name of the Demo", true));
        sorterData.SorterItems.Add(new SorterItem("Downloads", "Downloads", false));
        sorterData.SorterItems.Add(new SorterItem("AverageRating", "Average Rating of the Demo", false));
        sorterData.SorterItems.Add(new SorterItem("Added", "Sort By Added", false));
        sorterData.SorterItems.Add(new SorterItem("ReleaseDate", "Sort By Released", false));

        LoadQueryParamters();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadProductions();
    }

    private void OnSorted()
    {
        NavigateTo();
    }

    private void OnSelectPage(int page)
    {
        currentPage = page;
        NavigateTo();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        LoadQueryParamters();
        await LoadProductions();
        StateHasChanged();

    }

    private void LoadQueryParamters()
    {
        currentPage = navigationManager.GetFromQueryString<int>("currentPage");
        if (currentPage < 1) currentPage = 1;

        var sortCol = navigationManager.GetFromQueryString<string>("sortCol");
        if (sortCol != null)
            sorterData.CurrentSortColumn = sortCol;

        var sortDir = navigationManager.GetFromQueryString<bool?>("sortDir");
        if (sortDir.HasValue)
            sorterData.IsSortedAscending = sortDir.Value;
    }

    private void NavigateTo()
    {
        navigationManager.NavigateTo($"/{BaseUrl}?currentPage={currentPage}&sortCol={sorterData.CurrentSortColumn}&sortDir={sorterData.IsSortedAscending}");
    }

    private async Task LoadProductions()
    {
        logger.LogWarning("Load Production for {@productionIds}", ProductionIds);

        var paginatedResult = await unitOfWork.Productions.GetPaginatedWithGroups(p => ProductionIds.Contains(p.ProductionId), sorterData.CurrentSortColumn, sorterData.IsSortedAscending, currentPage, pageSize);
        productions = paginatedResult.Data;
        currentPage = paginatedResult.CurrentPage;
        totalNumberOfPages = paginatedResult.NumberOfPages;
        totalNumberOfRecords = paginatedResult.TotalNumberOfRecords;
        logger.LogWarning("Loaded {total}", totalNumberOfRecords);
    }

    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }
}