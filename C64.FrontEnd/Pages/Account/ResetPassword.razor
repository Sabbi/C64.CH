@page "/account/resetpassword/"

@using C64.FrontEnd.Validators

@inject Microsoft.AspNetCore.Identity.UserManager<User> userManager
@inject NavigationManager navigationManager
@inject IEmailSender emailSender
@inject IToastService toastService

<PageTitle Title="Account - Reset Password"/>
<Box>
    <Title>Forgot your password?</Title>
    <Content>
        <EditForm Model="resetPasswordModel" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ServerSideValidator @ref="serverSideValidator" />
            <div class="form-group">
                <label>EMail:</label>
                <div>
                    <InputText class="form-control" name="Email" @bind-Value="@resetPasswordModel.Email" />
                    <ValidationMessage For="@(() => resetPasswordModel.Email)" />
                </div>
            </div>
            <div class="form-group">
                <label>New password:</label>
                <div>
                    <InputPassword class="form-control" name="New Password" @bind-Value="@resetPasswordModel.NewPassword" />
                    <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" />
                </div>
            </div>
            <div class="form-group">
                <label>New password (confirm):</label>
                <div>
                    <InputPassword class="form-control" name="New Password" @bind-Value="@resetPasswordModel.NewPasswordConfirm" />
                    <ValidationMessage For="@(() => resetPasswordModel.NewPasswordConfirm)" />
                </div>
            </div>
            <button type="submit" disabled="@submitDisabled" class="btn btn-primary">Submit</button>
        </EditForm>
    </Content>
</Box>

@code {

    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();

    private ServerSideValidator serverSideValidator;

    private bool submitDisabled = false;

    private string userId { get; set; }
    private string vcode { get; set; }

    protected override void OnInitialized()
    {
        userId = navigationManager.GetFromQueryString<string>("userId");
        vcode = navigationManager.GetFromQueryString<string>("code");

        if (userId == null || vcode == null)
            navigationManager.NavigateTo("/");

        vcode = vcode.Replace(" ", "+");
    }

    private async Task OnValidSubmit()
    {
        submitDisabled = true;

        var errors = new Dictionary<string, List<string>>();

        var user = await userManager.FindByEmailAsync(resetPasswordModel.Email);

        if (user == null)
        {
            errors.Add("Email", new List<string>() { "Invalid EMail" });
            serverSideValidator.DisplayErrors(errors);
            submitDisabled = false;
            return;
        }

        var result = await userManager.ResetPasswordAsync(user, vcode, resetPasswordModel.NewPassword);

        if (!result.Succeeded)
        {
            errors.Add("Email", new List<string>() { "Unable to reset password, sorry. Please try again" });
            serverSideValidator.DisplayErrors(errors);
            submitDisabled = false;
            return;
        }

        toastService.ShowSuccess("Password reset ok! You can login with your new credentials now");
        navigationManager.NavigateTo("/");
    }

    private class ResetPasswordModel
    {
        [System.ComponentModel.DataAnnotations.EmailAddress]
        [System.ComponentModel.DataAnnotations.Required]
        public string Email { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(6)]
        public string NewPassword { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(6)]
        [System.ComponentModel.DataAnnotations.Compare("NewPassword")]
        public string NewPasswordConfirm { get; set; }

    }
}