@page "/account/password"
@layout AccountLayout

@using Microsoft.AspNetCore.Identity
@using C64.FrontEnd.Validators

@inject UserManager<User> userManager
@inject SignInManager<User> signInManager
@inject IToastService toastService

@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext

<h4>Change password</h4>
<partial name="_StatusMessage" for="StatusMessage" />
<div class="row">
    <div class="col-12">
        <EditForm Model="editPasswordModel" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ServerSideValidator @ref="serverSideValidator" />
            <div class="form-group">
                <label>Current password:</label>
                <div>
                    <InputPassword class="form-control" @bind-Value="@editPasswordModel.CurrentPassword" />
                    <ValidationMessage For="@(() => editPasswordModel.CurrentPassword)" />
                </div>
            </div>
            <div class="form-group">
                <label>New password:</label>
                <div>
                    <InputPassword class="form-control" @bind-Value="@editPasswordModel.NewPassword" />
                    <ValidationMessage For="@(() => editPasswordModel.NewPassword)" />
                </div>
            </div>
            <div class="form-group">
                <label>New password (repeat):</label>
                <div>
                    <InputPassword class="form-control" @bind-Value="@editPasswordModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => editPasswordModel.ConfirmPassword)" />
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Update password</button>
        </EditForm>
    </div>
</div>
@code {
    private EditPasswordModel editPasswordModel = new EditPasswordModel();
    private ServerSideValidator serverSideValidator;

    private async Task OnValidSubmit()
    {
        var user = await userManager.FindByIdAsync(httpContext.HttpContext.GetUserId());

        var changePasswordResult = await userManager.ChangePasswordAsync(user, editPasswordModel.CurrentPassword, editPasswordModel.NewPassword);

        if (changePasswordResult.Succeeded)
        {
            editPasswordModel = new EditPasswordModel();
            toastService.ShowSuccess("Password successfully updated!");
        }
        else
        {

            var errors = new Dictionary<string, List<string>>();

            foreach (var error in changePasswordResult.Errors)
            {
                errors.Add("CurrentPassword", new List<string>() { error.Description });
            }
            serverSideValidator.DisplayErrors(errors);
        }
    }
}