@page "/account/forgotpassword"

@using C64.FrontEnd.Validators

@inject Microsoft.AspNetCore.Identity.UserManager<User> userManager
@inject NavigationManager navigationManager
@inject IEmailSender emailSender
@inject IToastService toastService

<PageTitle Title="Account - Forgot Password" />
<Box>
    <Title>Forgot your password?</Title>
    <Content>
        @if (!mailSent)
        {
            <EditForm Model="forgotPasswordModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <ServerSideValidator @ref="serverSideValidator" />
                <div class="form-group">
                    <label>Please enter your EMail below, so we can send you the link to reset your password</label>
                    <div>
                        <InputText class="form-control" name="Email" @bind-Value="@forgotPasswordModel.Email" />
                        <ValidationMessage For="@(() => forgotPasswordModel.Email)" />
                    </div>
                </div>
                <button type="submit" disabled="@submitDisabled" class="btn btn-primary">Submit</button>
            </EditForm>
        }
        else
        {
            <h4>Password-Reset-Mail was sent, please check your inbox.</h4>
        }
    </Content>
</Box>
@code {

    private ForgotPasswordModel forgotPasswordModel = new ForgotPasswordModel();
    private ServerSideValidator serverSideValidator;
    private bool mailSent = false;

    private bool submitDisabled = false;

    private async Task OnValidSubmit()
    {
        submitDisabled = true;

        var user = await userManager.FindByEmailAsync(forgotPasswordModel.Email);

        if (user == null)
        {
            var errors = new Dictionary<string, List<string>>();
            errors.Add("Email", new List<string> { "Unkown EMail-Address" });
            serverSideValidator.DisplayErrors(errors);
            return;
        }
        else if (user.Blocked)
        {
            var errors = new Dictionary<string, List<string>>();
            errors.Add("Email", new List<string> { "Blocked EMail-Address, contact us" });
            serverSideValidator.DisplayErrors(errors);
            return;
        }

        var code = await userManager.GeneratePasswordResetTokenAsync(user);

        var callbackUrl = navigationManager.BaseUri + $"Account/ResetPassword/?userId={user.Id}&code={code}";

        var encoded = System.Text.Encodings.Web.HtmlEncoder.Default.Encode(callbackUrl);

        await emailSender.SendUserEmailAsync(new MailAddress(user.Email), "Reset password", $"Reset your password by <a href='{encoded}'>clicking here</a>.");

        toastService.ShowSuccess("Password-Reset-Mail was sent! Please check your inbox");

        mailSent = true;

        submitDisabled = false;
    }

    private class ForgotPasswordModel
    {
        [System.ComponentModel.DataAnnotations.EmailAddress]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MaxLength(255)]
        public string Email { get; set; }
    }
}