@namespace C64.FrontEnd.Pages

@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject ILogger<WriteComment>  logger;

<BootstrapModal @ref="bootstrapModal" Title="@($"Edit Group {Group.Name}")" Size="BootstrapModal.ModalSize.Large">
    <Content>
        <EditForm Model="editGroup" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>
                    Group name
                    :
                </label>
                <div>
                    @if (editGroup.CanEditName)
                    {
                        <InputText class="form-control" @bind-Value="@editGroup.Name" />
                        <ValidationMessage For="@(() => editGroup.Name)" />
                    }
                    else
                    {
                        <input class="form-control" readonly disabled value="@editGroup.Name" />
                    }
                </div>
            </div>
            <div class="form-group">
                <label>Aka (also known as):</label>
                <div>
                    <InputText class="form-control" @bind-Value="@editGroup.Aka" />
                    <ValidationMessage For="@(() => editGroup.Aka)" />
                </div>
            </div>
            <div class="form-group">
                <label>Base country:</label>
                <div>
                    <InputSelect class="form-control" @bind-Value="@editGroup.CountryId">
                        <option value="">Select Country:</option>
                        @foreach (var country in countries)
                        {
                            <option value="@country.CountryId">@country.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="form-group">
                <label>Founded on:</label>
                <div>
                    <InputPartialDate @bind-Value="@editGroup.FoundedDate" StartingYear="1982" EndingYear="DateTime.Now.Year" />
                </div>
            </div>

            <div class="form-group">
                <label>Terminated on:</label>
                <div>
                    <InputPartialDate @bind-Value="@editGroup.ClosedDate" StartingYear="1982" EndingYear="DateTime.Now.Year" />
                </div>
            </div>
            <button class="btn btn-primary" type="submit">Update Group</button>
        </EditForm>
    </Content>
</BootstrapModal>

@code {
    [Parameter]
    public Group Group { get; set; }

    [Parameter]
    public EventCallback OnClosed { get; set; }

    [Parameter]
    public IUnitOfWork unitOfWork { get; set; }

    private IEnumerable<Country> countries = new List<Country>();

    private BootstrapModal bootstrapModal;

    private EditGroup editGroup = new EditGroup();

    private async Task OnValidSubmit()
    {
        //logger.LogInformation("OnValidSubmit");

        var groupHistory = HistoryHandlerFactory.Get(HistoryEntity.Group, unitOfWork, Group, httpContext.HttpContext.GetUserId(), httpContext.HttpContext.RemoteIp());

        groupHistory.AddHistory(HistoryEditProperty.Name, editGroup.Name);
        groupHistory.AddHistory(HistoryEditProperty.Aka, editGroup.Aka);
        groupHistory.AddHistory(HistoryEditProperty.CountryId, editGroup.CountryId);
        groupHistory.AddHistory(HistoryEditProperty.FoundedDate, new PartialDate { Date = editGroup.FoundedDate.Date, Type = editGroup.FoundedDate.Type });
        groupHistory.AddHistory(HistoryEditProperty.ClosedDate, new PartialDate { Date = editGroup.ClosedDate.Date, Type = editGroup.ClosedDate.Type });
        groupHistory.Apply();

        await unitOfWork.Commit();

        await OnClosed.InvokeAsync(null);

        await bootstrapModal.Close();
    }

    protected override async Task OnInitializedAsync()
    {
        countries = (await unitOfWork.Countries.Find(p => p.Selectable)).OrderBy(p => p.Name);
        // Can edit name? Only Moderators+ OR if group was just added
        editGroup.CanEditName = (DateTime.Now - Group.Added).TotalDays < 5 || httpContext.HttpContext.UserIsModerator();

        editGroup.Name = Group.Name;
        editGroup.Aka = Group.Aka;
        editGroup.CountryId = Group.CountryId;
        editGroup.FoundedDate = new PartialDate(Group.FoundedDate, Group.FoundedDateType);
        editGroup.ClosedDate = new PartialDate(Group.ClosedDate, Group.ClosedDateType);
    }
}