@page "/groups/{GroupId:int}"
@page "/groups/{GroupId:int}/{GroupName}"

@using Microsoft.Extensions.DependencyInjection
@inherits OwningComponentBase

@implements IDisposable

@inject IJSRuntime jsRuntime
@inject ILogger<GroupDetail> logger
@inject Microsoft.AspNetCore.Http.HttpContextAccessor httpContext
@inject IModalService Modal
@inject IToastService toastService

@if (group != null)
{
    <Box>
        <Title>
            Details of @group.Name
            <div class="float-right pr-3 position-absolute" style="right:0; top:5px">
                <select class="form-control d-inline" id="groupEditSelect" @onchange="OnSelectEdit">
                    <option value="0">Edit Group</option>
                    <option value="general">- General Info</option>
                    <option value="additional">- Additional Info</option>
                    <option value="addmember">- Add Member</option>
                    <option value="editmember">- Edit Members</option>
                    <optgroup label="---------------------------"></optgroup>
                    <option value="viewHistory">View history</option>
                </select>
            </div>
        </Title>
        <Content>
            <table class="table table-prod-list">
                <tr><th>Name:</th><td>@group.Name</td></tr>
                @if (!string.IsNullOrEmpty(group.Aka))
                {
                    <tr><th>Aka</th><td>@group.Aka</td></tr>
                }
                <tr><th>Founded</th><td><PartialDateDisplay DateType="@group.FoundedDateType" DateValue="@group.FoundedDate" /></td></tr>
                @if (group.Country != null)
                {
                    <tr><th>Base country</th><td>@group.Country.Name</td></tr>
                }
                <tr><th>Closed</th><td><PartialDateDisplay DateType="@group.ClosedDateType" DateValue="@group.ClosedDate" /></td></tr>
                <tr><th>Homepage</th><td>@group.Url.ValueOrNa()</td></tr>
                <tr><th>Email</th><td>@group.Email.ValueOrNa()</td></tr>
                <tr><th>Releases</th><td>@group.NumberOfReleases</td></tr>
                @if (group.AverageRating > 0)
                {
                    <tr><th>Average Rating</th><td>@(group.AverageRating.ToString("#.00")) (with @group.NumberOfRatings.ToString("N0") ratings)</td></tr>
                }
                <tr><th>Downloads</th><td>@group.Downloads.ToString("N0")</td></tr>
                @if (!string.IsNullOrEmpty(group.Description))
                {
                    <tr><th>Description</th><td>@group.Description</td></tr>

                }
            </table>

            @if (group.ScenerGroups.Any())
            {
                <h5>Members:</h5>
                <table class="table table-prod-list">
                    <tr><th>Handle</th><th>Jobs</th><th>Joined</th><th>Left</th></tr>
                    @foreach (var scenergroup in group.ScenerGroups)
                    {
                        <tr>
                            <td><a href="/sceners/@scenergroup.ScenerId/@scenergroup.Scener.Handle.UrlEncode()">@scenergroup.Scener.Handle</a></td>
                            <td>
                                @if (scenergroup.ScenerGroupJobs.Any())
                                {
                                    @string.Join(", ", scenergroup.ScenerGroupJobs.Select(p => p.Job))
                                }
                            </td>
                            <td><PartialDateDisplay DateValue="@scenergroup.ValidFrom" DateType="@scenergroup.ValidFromType" /></td>
                            <td><PartialDateDisplay DateValue="@scenergroup.ValidTo" DateType="@scenergroup.ValidToType" /></td>
                        </tr>
                    }
                </table>
            }

            @if (productionIds != null)
            {
                <h5>Productions:</h5>
                <ProductionList ProductionIds="@productionIds" BaseUrl="@baseUrl" />
            }
        </Content>
    </Box>
}

@code {

    [Parameter]
    public int GroupId { get; set; }

    // Fake, only for nicer URL.
    [Parameter]
    public string GroupName { get; set; }

    private IUnitOfWork unitOfWork;

    private Group group;

    private string baseUrl => $"groups/{GroupId}/{GroupName}";
    private IEnumerable<int> productionIds;

    protected override async Task OnInitializedAsync()
    {
        await LoadGroup(GroupId);
    }

    private async Task OnSelectEdit(ChangeEventArgs args)
    {
        if (httpContext.HttpContext.GetUserId() == null && args.Value.ToString() != "viewHistory")
        {
            Modal.Show<LoginModal>();
            return;
        }
        IModalReference reference;

        if (args.Value.ToString() == "general")
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(EditGroupModal.Group), group);
            parameters.Add(nameof(EditGroupModal.unitOfWork), unitOfWork);
            reference = Modal.Show<EditGroupModal>("", parameters);
            await reference.Result;
        }
        if (args.Value.ToString() == "additional")
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(EditGroupAdditionalModal.Group), group);
            parameters.Add(nameof(EditGroupAdditionalModal.unitOfWork), unitOfWork);
            reference = Modal.Show<EditGroupAdditionalModal>("", parameters);
            await reference.Result;
        }
        else if (args.Value.ToString() == "addmember")
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(AddGroupMembersModal.Group), group);
            parameters.Add(nameof(AddGroupMembersModal.unitOfWork), unitOfWork);
            reference = Modal.Show<AddGroupMembersModal>("", parameters);
            await reference.Result;
        }
        else if (args.Value.ToString() == "editmember")
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(EditGroupMembersModal.Group), group);
            parameters.Add(nameof(EditGroupMembersModal.unitOfWork), unitOfWork);
            reference = Modal.Show<EditGroupMembersModal>("", parameters);
            await reference.Result;
        }
        else if (args.Value.ToString() == "viewHistory")
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ViewHistoryModal.Group), group);
            reference = Modal.Show<ViewHistoryModal>("", parameters);
            await reference.Result;
        }
        await jsRuntime.InvokeAsync<object>("ResetGroupEditSelect");
    }

    private async Task LoadGroup(int id)
    {
        var sw = new System.Diagnostics.Stopwatch();
        sw.Start();

        unitOfWork = ScopedServices.GetRequiredService<IUnitOfWork>();

        group = await unitOfWork.Groups.GetDetails(GroupId);

        productionIds = group.ProductionsGroups.Select(p => p.ProductionId);

        sw.Stop();

        logger.LogInformation("Loaded group {name} in {milliseconds}ms", group.Name, sw.ElapsedMilliseconds);

        StateHasChanged();
    }
}