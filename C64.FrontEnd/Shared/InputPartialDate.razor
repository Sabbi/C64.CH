@inherits InputBase<PartialDate>
@inject ILogger<InputPartialDate> logger
<select @bind="@year" class="form-control d-inline-block" style="width:25%">
    <option value="0">- Year -</option>
    @for (var i = StartingYear; i <= DateTime.Now.Year; i++)
    {
        <option>@i.ToString()</option>

    }
</select>
    &nbsp;
<select @bind="@month" class="form-control d-inline-block" style="width:25%">
    <option value="0">- Month -</option>
    @for (var i = 1; i <= 12 && _yearInt > 0; i++)
    {

        <option>@i.ToString()</option>

    }
</select>
   &nbsp;
<select @bind="@day" class="form-control d-inline-block" style="width:25%">
    <option value="0">- Day -</option>
    @for (var i = 1; i <= 31 && _yearInt > 0 && _monthInt > 0; i++)
    {

        <option>@i.ToString()</option>

    }
</select>

@code {
    /// <summary>
    /// TODO: Chnorz - A lot of clearup 2 do!
    /// Update 15.01.2021: Still Chnorz
    /// </summary>

    [Parameter]
    public int StartingYear { get; set; } = 1982;

    [Parameter]
    public int EndingYear { get; set; } = DateTime.Now.Year;

    private string _day = "0";
    private string _month = "0";
    private string _year = "0";

    private int _dayInt = 0;
    private int _monthInt = 0;
    private int _yearInt = 0;

    private string year
    {
        get
        {
            return _year;
        }
        set
        {
            _year = value;
            _yearInt = int.Parse(_year);

            if (_yearInt == 0)
            {
                _month = "0";
                _monthInt = 0;
                _day = "0";
                _dayInt = 0;
            }

            Updater();
        }
    }

    private string month
    {
        get
        {
            return _month;
        }
        set
        {
            _month = value;
            _monthInt = int.Parse(_month);

            if (_monthInt == 0)
            {
                _day = "0";
                _dayInt = 0;
            }
            Updater();
        }
    }

    private string day
    {
        get
        {
            return _day;
        }
        set
        {
            _day = value;
            _dayInt = int.Parse(_day);
            Updater();
        }
    }

    private void Updater()
    {
        _dayInt = int.Parse(day);
        _monthInt = int.Parse(month);
        _yearInt = int.Parse(year);

        if (_yearInt == 0)
        {
            Value.Date = DateTime.MinValue;
            Value.IsValidDate = true;
            Value.Type = DateType.None;
        }

        if (_monthInt > 0 && _yearInt > 0)
        {
            var daysInMonth = DateTime.DaysInMonth(_yearInt, _monthInt);

            if (_dayInt > daysInMonth)
            {
                _dayInt = daysInMonth;
                _day = daysInMonth.ToString();
            }
        }

        try
        {
            Value.Date = new DateTime(int.Parse(year), int.Parse(month) == 0 ? 1 : int.Parse(month), int.Parse(day) == 0 ? 1 : int.Parse(day));

            if (year == "0")
                Value.Type = DateType.None;
            if (month == "0" && day == "0")
                Value.Type = DateType.Year;
            else if (day == "0")
                Value.Type = DateType.YearMonth;
            else
                Value.Type = DateType.YearMonthDay;

            Value.IsValidDate = true;
        }
        catch (Exception e)
        {
            logger.LogInformation("Catched {e}", e);
            Value.IsValidDate = false;
        }
    }

    protected override string FormatValueAsString(PartialDate value)
    {
        throw new Exception("FormatValueAsString");
    }

    protected override bool TryParseValueFromString(string value, out PartialDate result, out string validationErrorMessage)
    {
        throw new Exception("TryParseValueFromString");
    }

    protected override void OnParametersSet()
    {
        if (Value != null)
        {
            _day = Value.Type == DateType.YearMonthDay ? Value.Date.Day.ToString() : "0";
            _month = Value.Type == DateType.YearMonth || Value.Type == DateType.YearMonthDay ? Value.Date.Month.ToString() : "0";
            _year = Value.Type != DateType.None ? Value.Date.Year.ToString() : "0";

            _yearInt = int.Parse(_year);
            _monthInt = int.Parse(_month);
            _dayInt = int.Parse(_day);
        }
    }
}