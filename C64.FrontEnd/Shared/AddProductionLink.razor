@inject IModalService Modal
@inject IUnitOfWork unitOfWork;
@inject IToastService toastService
@inject NavigationManager navigationManager

<a href="" @attributes="@AllOtherAttributes" @onclick="OpenAddProductionModal" @onclick:preventDefault>
    @Content
</a>

@code{
    [Parameter]
    public RenderFragment Content { get; set; }

    [Parameter]
    public Func<Task> ExecuteBefore { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AllOtherAttributes { get; set; }

    private async Task OpenAddProductionModal()
    {

        if (ExecuteBefore != null)
            await ExecuteBefore.Invoke();

        var parameters = new ModalParameters();
        parameters.Add(nameof(EditProductionModal.Production), new Production());
        parameters.Add(nameof(EditProductionModal.unitOfWork), unitOfWork);
        var reference = Modal.Show<AddProductionModal>("", parameters);
        var result = await reference.Result;

        if (!result.Cancelled)
        {
            var production = (Production)result.Data;
            toastService.ShowSuccess($"Production {production.Name} added");
            navigationManager.NavigateTo($"/productions/{production.ProductionId}/{production.Name.UrlEncode()}");
        }
    }
}