@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Configuration

@namespace C64.FrontEnd.Shared

@implements IDisposable
@inherits OwningComponentBase

@inject NavigationManager navigationManager
@inject IConfiguration configuration

@using System.Timers

<Box ContentClasses="p-0 pt-1">
    <Title>DemoRand();<div class="float-right pr-1"><i class="fas fa-xs fa-sync cursor-pointer" @onclick="Reload"></i></div></Title>
    <Content>
        <a @onclick="GoToProduction">
            <img class="w-100" src="/data/productionpictures/@production.ProductionPictures.OrderBy(p => p.Sort).FirstOrDefault(p => p.Show)?.Filename" />
            <div class="picture-caption">@production.Name</div>
        </a>
    </Content>
</Box>

@code {

    Production production = new Production();
    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        var delay = configuration.GetValue<double>("DemoRandDelay");

        await LoadRandomProduction();
        timer = new Timer();
        timer.Interval = delay;
        timer.Elapsed += OnTimerElapsed;
        timer.Start();
    }

    private async Task GoToProduction()
    {
        navigationManager.NavigateTo($"/productions/{production.ProductionId}/{production.Name.UrlEncode()}");
        await Reload();
    }

    private async Task Reload()
    {
        timer.Stop();
        await LoadRandomProduction();
        timer.Start();
    }

    private async void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        await LoadRandomProduction();
    }

    private async Task LoadRandomProduction()
    {

        var unitOfWork = ScopedServices.GetRequiredService<IUnitOfWork>();
        production = await unitOfWork.Productions.GetRandomProduction();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer.Elapsed -= OnTimerElapsed;
        timer.Dispose();
    }
}