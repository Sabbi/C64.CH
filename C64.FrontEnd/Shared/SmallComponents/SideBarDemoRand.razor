@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Configuration

@namespace C64.FrontEnd.Shared

@implements IDisposable
@inherits OwningComponentBase

@inject NavigationManager navigationManager
@inject IConfiguration configuration

@using System.Timers

<Box ContentClasses="p-0 pt-1">
    <Title>DemoRand();<div class="float-right pr-1"><i class="fas fa-xs fa-sync cursor-pointer" @onclick="Reload"></i></div></Title>
    <Content>
        @if (production != null)
        {
            <a href="/productions/@(production.ProductionId)/@(production.Name.UrlEncode())" @onclick="Reload">
                @if (production.ProductionPictures.Any(p => p.Show))
                {
                    <img class="w-100" src="/data/productionpictures/@production.ProductionPictures.OrderBy(p => p.Sort).FirstOrDefault(p => p.Show)?.Filename" />
                }
                else if (production.SubCategory == SubCategory.Music)
                {
                    <img class="w-100" src="/images/sid.png" />
                }
                else
                {
                    <img class="w-100" src="/images/nopicture.jpg" />
                }
                <div class="picture-caption">@production.Name</div>
            </a>
        }
    </Content>
</Box>

@code {

    Production production;
    private Timer timer = new Timer();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var delay = configuration.GetValue<double>("DemoRandDelay");

            await LoadRandomProduction();

            timer.Interval = delay;
            timer.Elapsed += OnTimerElapsed;
            timer.Start();
        }
    }

    private async Task Reload()
    {
        timer.Stop();
        await LoadRandomProduction();
        timer.Start();
    }

    private async void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        await LoadRandomProduction();
    }

    private async Task LoadRandomProduction()
    {
        var unitOfWork = ScopedServices.GetRequiredService<IUnitOfWork>();
        production = await unitOfWork.Productions.GetRandomProduction();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Elapsed -= OnTimerElapsed;
            timer.Dispose();
        }
    }
}