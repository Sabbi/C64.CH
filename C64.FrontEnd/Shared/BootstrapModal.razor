@inject NavigationManager navigationManager

<div class="modal-backdrop fade show" @onclick="Cancel"></div>
<div class="modal fade show d-block" style="pointer-events: none;" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-scrollable @sizeClass" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="close" aria-label="Close" @onclick="Cancel">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @Content
            </div>
            @if (Footer != null)
            {
                <div class="modal-footer">
                    @Footer
                </div>
            }
        </div>
    </div>
</div>

@code{
    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public ModalSize Size { get; set; } = ModalSize.Default;

    [Parameter]
    public RenderFragment Content { get; set; }

    [Parameter]
    public RenderFragment Footer { get; set; }

    private string sizeClass = string.Empty;

    protected override void OnInitialized()
    {
        switch (Size)
        {
            case ModalSize.Small:
                sizeClass = "modal-sm";
                break;
            case ModalSize.Large:
                sizeClass = "modal-lg";
                break;
            case ModalSize.ExtraLarge:
                sizeClass = "modal-xl";
                break;
            default:
                sizeClass = "";
                break;
        }
    }

    public async Task Close()
    {
        if (BlazoredModal != null)
            await BlazoredModal.Close();
        else
            navigationManager.NavigateTo("/");

    }

    public async Task Close(object data)
    {
        if (BlazoredModal != null)
            await BlazoredModal.Close(ModalResult.Ok(data));
        else
            navigationManager.NavigateTo("/");
    }

    public async Task Cancel()
    {
        if (BlazoredModal != null)
            await BlazoredModal.Cancel();
        else
            navigationManager.NavigateTo("/");
    }

    public enum ModalSize
    {
        Small,
        Default,
        Large,
        ExtraLarge

    }

}