@if (TotalAmountPages > 1)
{
    <nav>
        <ul class="pagination justify-content-center">
            @foreach (var link in links)
            {
                <li @onclick="@(() => SelectedPageInternal(link))" style="cursor:pointer" class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                    <span class="page-link" href="#">@link.Text</span>
                </li>
            }
        </ul>
    </nav>
}

@code {
    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public int TotalAmountPages { get; set; }

    [Parameter]
    public int Radius { get; set; } = 3;

    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    private List<LinkModel> links;

    protected override void OnParametersSet()
    {
        LoadPages();
        base.OnParametersSet();
    }

    private async Task SelectedPageInternal(LinkModel link)
    {
        if (link.Page == CurrentPage || !link.Enabled)
            return;

        CurrentPage = link.Page;

        await SelectedPage.InvokeAsync(link.Page);
    }

    private void LoadPages()
    {
        links = new List<LinkModel>();

        // First/Previous Link
        links.Add(new LinkModel(1, CurrentPage > 1, "«"));
        links.Add(new LinkModel(CurrentPage - 1, CurrentPage != 1, "‹"));

        for (int i = 1; i <= TotalAmountPages; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                links.Add(new LinkModel(i) { Active = CurrentPage == i });
            }
        }

        // Next/Last Link
        links.Add(new LinkModel(CurrentPage + 1, CurrentPage != TotalAmountPages, "›"));
        links.Add(new LinkModel(TotalAmountPages, CurrentPage < TotalAmountPages, "»"));
    }

    private class LinkModel
    {

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; }
        public bool Active { get; set; }

        public LinkModel(int page) : this(page, true) { }

        public LinkModel(int page, bool enabled) : this(page, enabled, page.ToString()) { }

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }
    }

}