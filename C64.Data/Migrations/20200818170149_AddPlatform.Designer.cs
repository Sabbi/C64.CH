// <auto-generated />
using System;
using C64.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace C64.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200818170149_AddPlatform")]
    partial class AddPlatform
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("C64.Data.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ip")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(65535);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36);

                    b.HasKey("CommentId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("C64.Data.Entities.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(63) CHARACTER SET utf8mb4")
                        .HasMaxLength(63);

                    b.Property<bool>("Selectable")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = "AD",
                            Name = "Andorra",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AE",
                            Name = "United Arab Emirates",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AF",
                            Name = "Afghanistan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AG",
                            Name = "Antigua And Barbuda",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AI",
                            Name = "Anguilla",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AL",
                            Name = "Albania",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AM",
                            Name = "Armenia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AN",
                            Name = "Netherlands Antilles",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AO",
                            Name = "Angola",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AQ",
                            Name = "Antarctica",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AR",
                            Name = "Argentina",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AS",
                            Name = "American Samoa",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AT",
                            Name = "Austria",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AU",
                            Name = "Australia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AW",
                            Name = "Aruba",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "AZ",
                            Name = "Azerbaijan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BA",
                            Name = "Bosnia And Herzegovina",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BB",
                            Name = "Barbados",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BD",
                            Name = "Bangladesh",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BE",
                            Name = "Belgium",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BF",
                            Name = "Burkina Faso",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BG",
                            Name = "Bulgaria",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BH",
                            Name = "Bahrain",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BI",
                            Name = "Burundi",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BJ",
                            Name = "Benin",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BM",
                            Name = "Bermuda",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BN",
                            Name = "Brunei Darussalam",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BO",
                            Name = "Bolivia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BR",
                            Name = "Brazil",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BS",
                            Name = "Bahamas",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BT",
                            Name = "Bhutan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BV",
                            Name = "Bouvet Island",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BW",
                            Name = "Botswana",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BY",
                            Name = "Belarus",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "BZ",
                            Name = "Belize",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CA",
                            Name = "Canada",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CC",
                            Name = "Cocos (keeling) Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CD",
                            Name = "Congo, The Democratic Republic Of The",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CF",
                            Name = "Central African Republic",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CG",
                            Name = "Congo",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CH",
                            Name = "Switzerland",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CI",
                            Name = "Cote Divoire",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CK",
                            Name = "Cook Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CL",
                            Name = "Chile",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CM",
                            Name = "Cameroon",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CN",
                            Name = "China",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CO",
                            Name = "Colombia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CR",
                            Name = "Costa Rica",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CU",
                            Name = "Cuba",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CV",
                            Name = "Cape Verde",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CX",
                            Name = "Christmas Island",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CY",
                            Name = "Cyprus",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "CZ",
                            Name = "Czech Republic",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "DE",
                            Name = "Germany",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "DJ",
                            Name = "Djibouti",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "DK",
                            Name = "Denmark",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "DM",
                            Name = "Dominica",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "DO",
                            Name = "Dominican Republic",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "DZ",
                            Name = "Algeria",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "EC",
                            Name = "Ecuador",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "EE",
                            Name = "Estonia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "EG",
                            Name = "Egypt",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "EH",
                            Name = "Western Sahara",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "ER",
                            Name = "Eritrea",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "ES",
                            Name = "Spain",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "ET",
                            Name = "Ethiopia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "FI",
                            Name = "Finland",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "FJ",
                            Name = "Fiji",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "FK",
                            Name = "Falkland Islands (malvinas)",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "FM",
                            Name = "Micronesia, Federated States Of",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "FO",
                            Name = "Faroe Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "FR",
                            Name = "France",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GA",
                            Name = "Gabon",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GB",
                            Name = "United Kingdom",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GD",
                            Name = "Grenada",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GE",
                            Name = "Georgia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GF",
                            Name = "French Guiana",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GH",
                            Name = "Ghana",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GI",
                            Name = "Gibraltar",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GL",
                            Name = "Greenland",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GM",
                            Name = "Gambia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GN",
                            Name = "Guinea",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GP",
                            Name = "Guadeloupe",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GQ",
                            Name = "Equatorial Guinea",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GR",
                            Name = "Greece",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GS",
                            Name = "South Georgia And The South Sandwich Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GT",
                            Name = "Guatemala",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GU",
                            Name = "Guam",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GW",
                            Name = "Guinea-bissau",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "GY",
                            Name = "Guyana",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "HK",
                            Name = "Hong Kong",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "HM",
                            Name = "Heard Island And Mcdonald Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "HN",
                            Name = "Honduras",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "HR",
                            Name = "Croatia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "HT",
                            Name = "Haiti",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "HU",
                            Name = "Hungary",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "ID",
                            Name = "Indonesia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "IE",
                            Name = "Ireland",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "IL",
                            Name = "Israel",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "IN",
                            Name = "India",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "IO",
                            Name = "British Indian Ocean Territory",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "IQ",
                            Name = "Iraq",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "IR",
                            Name = "Iran, Islamic Republic Of",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "IS",
                            Name = "Iceland",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "IT",
                            Name = "Italy",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "JM",
                            Name = "Jamaica",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "JO",
                            Name = "Jordan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "JP",
                            Name = "Japan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KE",
                            Name = "Kenya",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KG",
                            Name = "Kyrgyzstan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KH",
                            Name = "Cambodia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KI",
                            Name = "Kiribati",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KM",
                            Name = "Comoros",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KN",
                            Name = "Saint Kitts And Nevis",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KP",
                            Name = "Korea, Democratic Peoples Republic Of",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KR",
                            Name = "Korea, Republic Of",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KV",
                            Name = "Kosovo",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KW",
                            Name = "Kuwait",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KY",
                            Name = "Cayman Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "KZ",
                            Name = "Kazakstan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LA",
                            Name = "Lao Peoples Democratic Republic",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LB",
                            Name = "Lebanon",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LC",
                            Name = "Saint Lucia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LI",
                            Name = "Liechtenstein",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LK",
                            Name = "Sri Lanka",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LR",
                            Name = "Liberia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LS",
                            Name = "Lesotho",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LT",
                            Name = "Lithuania",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LU",
                            Name = "Luxembourg",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LV",
                            Name = "Latvia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "LY",
                            Name = "Libyan Arab Jamahiriya",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MA",
                            Name = "Morocco",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MC",
                            Name = "Monaco",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MD",
                            Name = "Moldova, Republic Of",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "ME",
                            Name = "Montenegro",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MG",
                            Name = "Madagascar",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MH",
                            Name = "Marshall Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MK",
                            Name = "Macedonia, The Former Yugoslav Republic Of",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "ML",
                            Name = "Mali",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MM",
                            Name = "Myanmar",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MN",
                            Name = "Mongolia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MO",
                            Name = "Macau",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MP",
                            Name = "Northern Mariana Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MQ",
                            Name = "Martinique",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MR",
                            Name = "Mauritania",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MS",
                            Name = "Montserrat",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MT",
                            Name = "Malta",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MU",
                            Name = "Mauritius",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MV",
                            Name = "Maldives",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MW",
                            Name = "Malawi",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MX",
                            Name = "Mexico",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MY",
                            Name = "Malaysia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "MZ",
                            Name = "Mozambique",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NA",
                            Name = "Namibia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NC",
                            Name = "New Caledonia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NE",
                            Name = "Niger",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NF",
                            Name = "Norfolk Island",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NG",
                            Name = "Nigeria",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NI",
                            Name = "Nicaragua",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NL",
                            Name = "Netherlands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NO",
                            Name = "Norway",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NP",
                            Name = "Nepal",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NR",
                            Name = "Nauru",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NU",
                            Name = "Niue",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "NZ",
                            Name = "New Zealand",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "OM",
                            Name = "Oman",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PA",
                            Name = "Panama",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PE",
                            Name = "Peru",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PF",
                            Name = "French Polynesia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PG",
                            Name = "Papua New Guinea",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PH",
                            Name = "Philippines",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PK",
                            Name = "Pakistan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PL",
                            Name = "Poland",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PM",
                            Name = "Saint Pierre And Miquelon",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PN",
                            Name = "Pitcairn",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PR",
                            Name = "Puerto Rico",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PS",
                            Name = "Palestinian Territory, Occupied",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PT",
                            Name = "Portugal",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PW",
                            Name = "Palau",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "PY",
                            Name = "Paraguay",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "QA",
                            Name = "Qatar",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "RE",
                            Name = "Reunion",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "RO",
                            Name = "Romania",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "RS",
                            Name = "Serbia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "RU",
                            Name = "Russian Federation",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "RW",
                            Name = "Rwanda",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SA",
                            Name = "Saudi Arabia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SB",
                            Name = "Solomon Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SC",
                            Name = "Seychelles",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SD",
                            Name = "Sudan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SE",
                            Name = "Sweden",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SG",
                            Name = "Singapore",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SH",
                            Name = "Saint Helena",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SI",
                            Name = "Slovenia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SJ",
                            Name = "Svalbard And Jan Mayen",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SK",
                            Name = "Slovakia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SL",
                            Name = "Sierra Leone",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SM",
                            Name = "San Marino",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SN",
                            Name = "Senegal",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SO",
                            Name = "Somalia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SR",
                            Name = "Suriname",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "ST",
                            Name = "Sao Tome And Principe",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SV",
                            Name = "El Salvador",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SY",
                            Name = "Syrian Arab Republic",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "SZ",
                            Name = "Swaziland",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TC",
                            Name = "Turks And Caicos Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TD",
                            Name = "Chad",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TF",
                            Name = "French Southern Territories",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TG",
                            Name = "Togo",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TH",
                            Name = "Thailand",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TJ",
                            Name = "Tajikistan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TK",
                            Name = "Tokelau",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TM",
                            Name = "Turkmenistan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TN",
                            Name = "Tunisia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TO",
                            Name = "Tonga",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TP",
                            Name = "East Timor",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TR",
                            Name = "Turkey",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TT",
                            Name = "Trinidad And Tobago",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TV",
                            Name = "Tuvalu",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TW",
                            Name = "Taiwan, Province Of China",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "TZ",
                            Name = "Tanzania, United Republic Of",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "UA",
                            Name = "Ukraine",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "UG",
                            Name = "Uganda",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "UM",
                            Name = "United States Minor Outlying Islands",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "US",
                            Name = "United States",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "UY",
                            Name = "Uruguay",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "UZ",
                            Name = "Uzbekistan",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "VA",
                            Name = "Holy See (vatican City State)",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "VC",
                            Name = "Saint Vincent And The Grenadines",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "VE",
                            Name = "Venezuela",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "VG",
                            Name = "Virgin Islands, British",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "VI",
                            Name = "Virgin Islands, U.s.",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "VN",
                            Name = "Viet Nam",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "VU",
                            Name = "Vanuatu",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "WF",
                            Name = "Wallis And Futuna",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "WS",
                            Name = "Samoa",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "YE",
                            Name = "Yemen",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "YT",
                            Name = "Mayotte",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "ZA",
                            Name = "South Africa",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "ZM",
                            Name = "Zambia",
                            Selectable = true
                        },
                        new
                        {
                            CountryId = "ZW",
                            Name = "Zimbabwe",
                            Selectable = true
                        });
                });

            modelBuilder.Entity("C64.Data.Entities.DbFile", b =>
                {
                    b.Property<int>("DbFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasColumnType("varchar(127) CHARACTER SET utf8mb4")
                        .HasMaxLength(127);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(254) CHARACTER SET utf8mb4")
                        .HasMaxLength(254);

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("DbFileId");

                    b.HasIndex("Container", "FileName");

                    b.ToTable("DbFiles");
                });

            modelBuilder.Entity("C64.Data.Entities.Download", b =>
                {
                    b.Property<int>("DownloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DownloadedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ip")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<int>("ProductionFileId")
                        .HasColumnType("int");

                    b.Property<string>("Referer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2047);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36);

                    b.HasKey("DownloadId");

                    b.HasIndex("DownloadedOn");

                    b.HasIndex("ProductionFileId");

                    b.HasIndex("UserId");

                    b.HasIndex("ProductionFileId", "DownloadedOn");

                    b.ToTable("Downloads");
                });

            modelBuilder.Entity("C64.Data.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AddedById")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Aka")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("ClosedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ClosedDateType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(65535);

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FoundedDateType")
                        .HasColumnType("int");

                    b.Property<string>("LogoFile")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("NumberOfRatings")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfReleases")
                        .HasColumnType("int");

                    b.Property<int>("SumOfRatings")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("AddedById");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("C64.Data.Entities.GuestbookEntry", b =>
                {
                    b.Property<int>("GuestbookEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(65535);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Homepage")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Ip")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36);

                    b.Property<DateTime>("WrittenAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("GuestbookEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("GuestbookEntries");
                });

            modelBuilder.Entity("C64.Data.Entities.HiddenPart", b =>
                {
                    b.Property<int>("HiddenPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(65535);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.HasKey("HiddenPartId");

                    b.HasIndex("ProductionId");

                    b.ToTable("HiddenParts");
                });

            modelBuilder.Entity("C64.Data.Entities.HistoryProduction", b =>
                {
                    b.Property<int>("HistoryProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AffectedId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Applied")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IpAdress")
                        .HasColumnType("varchar(46) CHARACTER SET utf8mb4")
                        .HasMaxLength(46);

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Property")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Undid")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36);

                    b.HasKey("HistoryProductionId");

                    b.HasIndex("AffectedId");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryProductions");
                });

            modelBuilder.Entity("C64.Data.Entities.Link", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Hits")
                        .HasColumnType("int");

                    b.Property<int>("LinkCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Url")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("LinkId");

                    b.HasIndex("LinkCategoryId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("C64.Data.Entities.LinkCategory", b =>
                {
                    b.Property<int>("LinkCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(63) CHARACTER SET utf8mb4")
                        .HasMaxLength(63);

                    b.Property<bool>("Selectable")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("LinkCategoryId");

                    b.ToTable("LinkCategories");

                    b.HasData(
                        new
                        {
                            LinkCategoryId = 1,
                            Name = "General",
                            Selectable = true
                        },
                        new
                        {
                            LinkCategoryId = 2,
                            Name = "Games",
                            Selectable = true
                        },
                        new
                        {
                            LinkCategoryId = 3,
                            Name = "SID",
                            Selectable = true
                        },
                        new
                        {
                            LinkCategoryId = 4,
                            Name = "Group",
                            Selectable = true
                        },
                        new
                        {
                            LinkCategoryId = 5,
                            Name = "Hardware",
                            Selectable = true
                        },
                        new
                        {
                            LinkCategoryId = 6,
                            Name = "Zines",
                            Selectable = true
                        });
                });

            modelBuilder.Entity("C64.Data.Entities.PartiesGroups", b =>
                {
                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("PartyId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("PartiesGroups");
                });

            modelBuilder.Entity("C64.Data.Entities.PartiesSceners", b =>
                {
                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int>("ScenerId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("PartyId", "ScenerId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ScenerId");

                    b.ToTable("PartiesSceners");
                });

            modelBuilder.Entity("C64.Data.Entities.Party", b =>
                {
                    b.Property<int>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryId")
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(65535);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(63) CHARACTER SET utf8mb4")
                        .HasMaxLength(63);

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Organizers")
                        .HasColumnType("varchar(1023) CHARACTER SET utf8mb4")
                        .HasMaxLength(1023);

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("PartyId");

                    b.HasIndex("CountryId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("C64.Data.Entities.Production", b =>
                {
                    b.Property<int>("ProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Aka")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<bool>("IsPartyRelease")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("NumberOfComments")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfHiddenParts")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRatings")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfVideos")
                        .HasColumnType("int");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReleaseDateType")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(65535);

                    b.Property<int>("SubCategory")
                        .HasColumnType("int");

                    b.Property<string>("Submitter")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("SubmitterUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("SumOfRatings")
                        .HasColumnType("int");

                    b.Property<int>("TopCategory")
                        .HasColumnType("int");

                    b.Property<string>("Uploader")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36);

                    b.Property<int>("VideoType")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("ProductionId");

                    b.HasIndex("SubmitterUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionCredit", b =>
                {
                    b.Property<int>("ProductionCreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Credit")
                        .HasColumnType("int");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<int>("ScenerId")
                        .HasColumnType("int");

                    b.HasKey("ProductionCreditId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ScenerId");

                    b.ToTable("ProductionCredits");
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionFile", b =>
                {
                    b.Property<int>("ProductionFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<string>("Filename")
                        .HasColumnType("varchar(1023) CHARACTER SET utf8mb4")
                        .HasMaxLength(1023);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<bool>("Show")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("ProductionFileId");

                    b.HasIndex("ProductionId");

                    b.ToTable("ProductionFiles");
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionPicture", b =>
                {
                    b.Property<int>("ProductionPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Filename")
                        .HasColumnType("varchar(511) CHARACTER SET utf8mb4")
                        .HasMaxLength(511);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<bool>("Show")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("ProductionPictureId");

                    b.HasIndex("ProductionId");

                    b.ToTable("ProductionPictures");
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionVideo", b =>
                {
                    b.Property<int>("ProductionVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<bool>("Show")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("VideoId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("VideoProvider")
                        .HasColumnType("int");

                    b.HasKey("ProductionVideoId");

                    b.HasIndex("ProductionId");

                    b.ToTable("ProductionVideos");
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionsGroups", b =>
                {
                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("ProductionId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ProductionsGroups");
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionsParties", b =>
                {
                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("ProductionId", "PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("ProductionsParties");
                });

            modelBuilder.Entity("C64.Data.Entities.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36);

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("C64.Data.Entities.Scener", b =>
                {
                    b.Property<int>("ScenerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Handle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RealName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("ShowRealName")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ScenerId");

                    b.ToTable("Sceners");
                });

            modelBuilder.Entity("C64.Data.Entities.ScenerGroupJob", b =>
                {
                    b.Property<int>("ScenerGroupJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Job")
                        .HasColumnType("int");

                    b.Property<int>("ScenerGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ScenersGroupsId")
                        .HasColumnType("int");

                    b.HasKey("ScenerGroupJobId");

                    b.HasIndex("ScenersGroupsId");

                    b.ToTable("ScenerGroupJob");
                });

            modelBuilder.Entity("C64.Data.Entities.ScenersGroups", b =>
                {
                    b.Property<int>("ScenersGroupsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ScenerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ValidFromType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ValidToType")
                        .HasColumnType("int");

                    b.HasKey("ScenersGroupsId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ScenerId");

                    b.ToTable("ScenersGroups");
                });

            modelBuilder.Entity("C64.Data.Entities.ScenersJobs", b =>
                {
                    b.Property<int>("ScenersJobsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Job")
                        .HasColumnType("int");

                    b.Property<int>("ScenerId")
                        .HasColumnType("int");

                    b.HasKey("ScenersJobsId");

                    b.HasIndex("ScenerId");

                    b.ToTable("ScenersJobs");
                });

            modelBuilder.Entity("C64.Data.Entities.ScenersSceners", b =>
                {
                    b.Property<int>("ScenerId")
                        .HasColumnType("int");

                    b.Property<int>("ScenerToId")
                        .HasColumnType("int");

                    b.HasKey("ScenerId", "ScenerToId");

                    b.HasIndex("ScenerToId");

                    b.ToTable("ScenerSceners");
                });

            modelBuilder.Entity("C64.Data.Entities.SiteInfo", b =>
                {
                    b.Property<int>("SiteInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Show")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(65535);

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36);

                    b.Property<string>("Writer")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("SiteInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("SiteInfos");
                });

            modelBuilder.Entity("C64.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("BirthdayType")
                        .HasColumnType("int");

                    b.Property<string>("Blabla")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(65535);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CountryId")
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4")
                        .HasMaxLength(2);

                    b.Property<bool>("Digest")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FavDemos")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FavGroups")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Groups")
                        .HasColumnType("varchar(1023) CHARACTER SET utf8mb4")
                        .HasMaxLength(1023);

                    b.Property<string>("Homepage")
                        .HasColumnType("varchar(1023) CHARACTER SET utf8mb4")
                        .HasMaxLength(1023);

                    b.Property<string>("Icq")
                        .HasColumnType("varchar(63) CHARACTER SET utf8mb4")
                        .HasMaxLength(63);

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Newsletter")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Occupation")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PublicEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PublicFavorites")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PublicRatings")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Realname")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ScenerId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Watching")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("ScenerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("C64.Data.Entities.UserFavorite", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "ProductionId");

                    b.HasIndex("ProductionId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("C64.Data.Entities.Comment", b =>
                {
                    b.HasOne("C64.Data.Entities.Production", "Production")
                        .WithMany("Comments")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("C64.Data.Entities.Download", b =>
                {
                    b.HasOne("C64.Data.Entities.ProductionFile", "ProductionFile")
                        .WithMany()
                        .HasForeignKey("ProductionFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("C64.Data.Entities.Group", b =>
                {
                    b.HasOne("C64.Data.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");
                });

            modelBuilder.Entity("C64.Data.Entities.GuestbookEntry", b =>
                {
                    b.HasOne("C64.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("C64.Data.Entities.HiddenPart", b =>
                {
                    b.HasOne("C64.Data.Entities.Production", "Production")
                        .WithMany("HiddenParts")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.HistoryProduction", b =>
                {
                    b.HasOne("C64.Data.Entities.Production", "Affected")
                        .WithMany()
                        .HasForeignKey("AffectedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("C64.Data.Entities.Link", b =>
                {
                    b.HasOne("C64.Data.Entities.LinkCategory", "LinkCategory")
                        .WithMany()
                        .HasForeignKey("LinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.PartiesGroups", b =>
                {
                    b.HasOne("C64.Data.Entities.Group", "Group")
                        .WithMany("PartiesGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.Party", "Party")
                        .WithMany("PartiesGroups")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.PartiesSceners", b =>
                {
                    b.HasOne("C64.Data.Entities.Group", null)
                        .WithMany("PartiesSceners")
                        .HasForeignKey("GroupId");

                    b.HasOne("C64.Data.Entities.Party", "Party")
                        .WithMany("PartiesSceners")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.Scener", "Scener")
                        .WithMany("PartiesSceners")
                        .HasForeignKey("ScenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.Party", b =>
                {
                    b.HasOne("C64.Data.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("C64.Data.Entities.Production", b =>
                {
                    b.HasOne("C64.Data.Entities.User", "SubmitterUser")
                        .WithMany()
                        .HasForeignKey("SubmitterUserId");

                    b.HasOne("C64.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionCredit", b =>
                {
                    b.HasOne("C64.Data.Entities.Production", "Production")
                        .WithMany("ProductionCredits")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.Scener", "Scener")
                        .WithMany()
                        .HasForeignKey("ScenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionFile", b =>
                {
                    b.HasOne("C64.Data.Entities.Production", "Production")
                        .WithMany("ProductionFiles")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionPicture", b =>
                {
                    b.HasOne("C64.Data.Entities.Production", "Production")
                        .WithMany("ProductionPictures")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionVideo", b =>
                {
                    b.HasOne("C64.Data.Entities.Production", "Production")
                        .WithMany("ProductionVideos")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionsGroups", b =>
                {
                    b.HasOne("C64.Data.Entities.Group", "Group")
                        .WithMany("ProductionsGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.Production", "Production")
                        .WithMany("ProductionsGroups")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.ProductionsParties", b =>
                {
                    b.HasOne("C64.Data.Entities.Party", "Party")
                        .WithMany("ProductionsParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.Production", "Production")
                        .WithMany("ProductionsParties")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.Rating", b =>
                {
                    b.HasOne("C64.Data.Entities.Production", "Production")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("C64.Data.Entities.ScenerGroupJob", b =>
                {
                    b.HasOne("C64.Data.Entities.ScenersGroups", null)
                        .WithMany("ScenerGroupJobs")
                        .HasForeignKey("ScenersGroupsId");
                });

            modelBuilder.Entity("C64.Data.Entities.ScenersGroups", b =>
                {
                    b.HasOne("C64.Data.Entities.Group", "Group")
                        .WithMany("ScenerGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.Scener", "Scener")
                        .WithMany("ScenersGroups")
                        .HasForeignKey("ScenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.ScenersJobs", b =>
                {
                    b.HasOne("C64.Data.Entities.Scener", "Scener")
                        .WithMany("Jobs")
                        .HasForeignKey("ScenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.ScenersSceners", b =>
                {
                    b.HasOne("C64.Data.Entities.Scener", "ScenerTo")
                        .WithMany("AlterEgos")
                        .HasForeignKey("ScenerToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C64.Data.Entities.SiteInfo", b =>
                {
                    b.HasOne("C64.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("C64.Data.Entities.User", b =>
                {
                    b.HasOne("C64.Data.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("C64.Data.Entities.Scener", "Scener")
                        .WithMany()
                        .HasForeignKey("ScenerId");
                });

            modelBuilder.Entity("C64.Data.Entities.UserFavorite", b =>
                {
                    b.HasOne("C64.Data.Entities.Production", "Production")
                        .WithMany("UserFavorites")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("C64.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("C64.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C64.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("C64.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
